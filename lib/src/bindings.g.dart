// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings to `LibGpiod`
class LibGpiod {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  LibGpiod(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  LibGpiod.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> ___tzname =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Int8>>>('__tzname');

  ffi.Pointer<ffi.Pointer<ffi.Int8>> get __tzname => ___tzname.value;

  set __tzname(ffi.Pointer<ffi.Pointer<ffi.Int8>> value) =>
      ___tzname.value = value;

  late final ffi.Pointer<ffi.Int32> ___daylight =
      _lookup<ffi.Int32>('__daylight');

  int get __daylight => ___daylight.value;

  set __daylight(int value) => ___daylight.value = value;

  late final ffi.Pointer<ffi.Int64> ___timezone =
      _lookup<ffi.Int64>('__timezone');

  int get __timezone => ___timezone.value;

  set __timezone(int value) => ___timezone.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> _tzname =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Int8>>>('tzname');

  ffi.Pointer<ffi.Pointer<ffi.Int8>> get tzname => _tzname.value;

  set tzname(ffi.Pointer<ffi.Pointer<ffi.Int8>> value) => _tzname.value = value;

  late final ffi.Pointer<ffi.Int32> _daylight = _lookup<ffi.Int32>('daylight');

  int get daylight => _daylight.value;

  set daylight(int value) => _daylight.value = value;

  late final ffi.Pointer<ffi.Int64> _timezone = _lookup<ffi.Int64>('timezone');

  int get timezone => _timezone.value;

  set timezone(int value) => _timezone.value = value;

  int gpiod_ctxless_get_value(
    ffi.Pointer<ffi.Int8> device,
    int offset,
    int active_low,
    ffi.Pointer<ffi.Int8> consumer,
  ) {
    return _gpiod_ctxless_get_value(
      device,
      offset,
      active_low,
      consumer,
    );
  }

  late final _gpiod_ctxless_get_value_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_ctxless_get_value>>(
          'gpiod_ctxless_get_value');
  late final _dart_gpiod_ctxless_get_value _gpiod_ctxless_get_value =
      _gpiod_ctxless_get_value_ptr.asFunction<_dart_gpiod_ctxless_get_value>();

  int gpiod_ctxless_get_value_ext(
    ffi.Pointer<ffi.Int8> device,
    int offset,
    int active_low,
    ffi.Pointer<ffi.Int8> consumer,
    int flags,
  ) {
    return _gpiod_ctxless_get_value_ext(
      device,
      offset,
      active_low,
      consumer,
      flags,
    );
  }

  late final _gpiod_ctxless_get_value_ext_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_ctxless_get_value_ext>>(
          'gpiod_ctxless_get_value_ext');
  late final _dart_gpiod_ctxless_get_value_ext _gpiod_ctxless_get_value_ext =
      _gpiod_ctxless_get_value_ext_ptr
          .asFunction<_dart_gpiod_ctxless_get_value_ext>();

  int gpiod_ctxless_get_value_multiple(
    ffi.Pointer<ffi.Int8> device,
    ffi.Pointer<ffi.Uint32> offsets,
    ffi.Pointer<ffi.Int32> values,
    int num_lines,
    int active_low,
    ffi.Pointer<ffi.Int8> consumer,
  ) {
    return _gpiod_ctxless_get_value_multiple(
      device,
      offsets,
      values,
      num_lines,
      active_low,
      consumer,
    );
  }

  late final _gpiod_ctxless_get_value_multiple_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_ctxless_get_value_multiple>>(
          'gpiod_ctxless_get_value_multiple');
  late final _dart_gpiod_ctxless_get_value_multiple
      _gpiod_ctxless_get_value_multiple = _gpiod_ctxless_get_value_multiple_ptr
          .asFunction<_dart_gpiod_ctxless_get_value_multiple>();

  int gpiod_ctxless_get_value_multiple_ext(
    ffi.Pointer<ffi.Int8> device,
    ffi.Pointer<ffi.Uint32> offsets,
    ffi.Pointer<ffi.Int32> values,
    int num_lines,
    int active_low,
    ffi.Pointer<ffi.Int8> consumer,
    int flags,
  ) {
    return _gpiod_ctxless_get_value_multiple_ext(
      device,
      offsets,
      values,
      num_lines,
      active_low,
      consumer,
      flags,
    );
  }

  late final _gpiod_ctxless_get_value_multiple_ext_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_ctxless_get_value_multiple_ext>>(
          'gpiod_ctxless_get_value_multiple_ext');
  late final _dart_gpiod_ctxless_get_value_multiple_ext
      _gpiod_ctxless_get_value_multiple_ext =
      _gpiod_ctxless_get_value_multiple_ext_ptr
          .asFunction<_dart_gpiod_ctxless_get_value_multiple_ext>();

  int gpiod_ctxless_set_value(
    ffi.Pointer<ffi.Int8> device,
    int offset,
    int value,
    int active_low,
    ffi.Pointer<ffi.Int8> consumer,
    ffi.Pointer<ffi.NativeFunction<gpiod_ctxless_set_value_cb>> cb,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _gpiod_ctxless_set_value(
      device,
      offset,
      value,
      active_low,
      consumer,
      cb,
      data,
    );
  }

  late final _gpiod_ctxless_set_value_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_ctxless_set_value>>(
          'gpiod_ctxless_set_value');
  late final _dart_gpiod_ctxless_set_value _gpiod_ctxless_set_value =
      _gpiod_ctxless_set_value_ptr.asFunction<_dart_gpiod_ctxless_set_value>();

  int gpiod_ctxless_set_value_ext(
    ffi.Pointer<ffi.Int8> device,
    int offset,
    int value,
    int active_low,
    ffi.Pointer<ffi.Int8> consumer,
    ffi.Pointer<ffi.NativeFunction<gpiod_ctxless_set_value_cb>> cb,
    ffi.Pointer<ffi.Void> data,
    int flags,
  ) {
    return _gpiod_ctxless_set_value_ext(
      device,
      offset,
      value,
      active_low,
      consumer,
      cb,
      data,
      flags,
    );
  }

  late final _gpiod_ctxless_set_value_ext_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_ctxless_set_value_ext>>(
          'gpiod_ctxless_set_value_ext');
  late final _dart_gpiod_ctxless_set_value_ext _gpiod_ctxless_set_value_ext =
      _gpiod_ctxless_set_value_ext_ptr
          .asFunction<_dart_gpiod_ctxless_set_value_ext>();

  int gpiod_ctxless_set_value_multiple(
    ffi.Pointer<ffi.Int8> device,
    ffi.Pointer<ffi.Uint32> offsets,
    ffi.Pointer<ffi.Int32> values,
    int num_lines,
    int active_low,
    ffi.Pointer<ffi.Int8> consumer,
    ffi.Pointer<ffi.NativeFunction<gpiod_ctxless_set_value_cb>> cb,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _gpiod_ctxless_set_value_multiple(
      device,
      offsets,
      values,
      num_lines,
      active_low,
      consumer,
      cb,
      data,
    );
  }

  late final _gpiod_ctxless_set_value_multiple_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_ctxless_set_value_multiple>>(
          'gpiod_ctxless_set_value_multiple');
  late final _dart_gpiod_ctxless_set_value_multiple
      _gpiod_ctxless_set_value_multiple = _gpiod_ctxless_set_value_multiple_ptr
          .asFunction<_dart_gpiod_ctxless_set_value_multiple>();

  int gpiod_ctxless_set_value_multiple_ext(
    ffi.Pointer<ffi.Int8> device,
    ffi.Pointer<ffi.Uint32> offsets,
    ffi.Pointer<ffi.Int32> values,
    int num_lines,
    int active_low,
    ffi.Pointer<ffi.Int8> consumer,
    ffi.Pointer<ffi.NativeFunction<gpiod_ctxless_set_value_cb>> cb,
    ffi.Pointer<ffi.Void> data,
    int flags,
  ) {
    return _gpiod_ctxless_set_value_multiple_ext(
      device,
      offsets,
      values,
      num_lines,
      active_low,
      consumer,
      cb,
      data,
      flags,
    );
  }

  late final _gpiod_ctxless_set_value_multiple_ext_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_ctxless_set_value_multiple_ext>>(
          'gpiod_ctxless_set_value_multiple_ext');
  late final _dart_gpiod_ctxless_set_value_multiple_ext
      _gpiod_ctxless_set_value_multiple_ext =
      _gpiod_ctxless_set_value_multiple_ext_ptr
          .asFunction<_dart_gpiod_ctxless_set_value_multiple_ext>();

  int gpiod_ctxless_event_loop(
    ffi.Pointer<ffi.Int8> device,
    int offset,
    int active_low,
    ffi.Pointer<ffi.Int8> consumer,
    ffi.Pointer<timespec> timeout,
    ffi.Pointer<ffi.NativeFunction<gpiod_ctxless_event_poll_cb>> poll_cb,
    ffi.Pointer<ffi.NativeFunction<gpiod_ctxless_event_handle_cb>> event_cb,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _gpiod_ctxless_event_loop(
      device,
      offset,
      active_low,
      consumer,
      timeout,
      poll_cb,
      event_cb,
      data,
    );
  }

  late final _gpiod_ctxless_event_loop_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_ctxless_event_loop>>(
          'gpiod_ctxless_event_loop');
  late final _dart_gpiod_ctxless_event_loop _gpiod_ctxless_event_loop =
      _gpiod_ctxless_event_loop_ptr
          .asFunction<_dart_gpiod_ctxless_event_loop>();

  int gpiod_ctxless_event_loop_multiple(
    ffi.Pointer<ffi.Int8> device,
    ffi.Pointer<ffi.Uint32> offsets,
    int num_lines,
    int active_low,
    ffi.Pointer<ffi.Int8> consumer,
    ffi.Pointer<timespec> timeout,
    ffi.Pointer<ffi.NativeFunction<gpiod_ctxless_event_poll_cb>> poll_cb,
    ffi.Pointer<ffi.NativeFunction<gpiod_ctxless_event_handle_cb>> event_cb,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _gpiod_ctxless_event_loop_multiple(
      device,
      offsets,
      num_lines,
      active_low,
      consumer,
      timeout,
      poll_cb,
      event_cb,
      data,
    );
  }

  late final _gpiod_ctxless_event_loop_multiple_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_ctxless_event_loop_multiple>>(
          'gpiod_ctxless_event_loop_multiple');
  late final _dart_gpiod_ctxless_event_loop_multiple
      _gpiod_ctxless_event_loop_multiple =
      _gpiod_ctxless_event_loop_multiple_ptr
          .asFunction<_dart_gpiod_ctxless_event_loop_multiple>();

  int gpiod_ctxless_event_monitor(
    ffi.Pointer<ffi.Int8> device,
    int event_type,
    int offset,
    int active_low,
    ffi.Pointer<ffi.Int8> consumer,
    ffi.Pointer<timespec> timeout,
    ffi.Pointer<ffi.NativeFunction<gpiod_ctxless_event_poll_cb>> poll_cb,
    ffi.Pointer<ffi.NativeFunction<gpiod_ctxless_event_handle_cb>> event_cb,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _gpiod_ctxless_event_monitor(
      device,
      event_type,
      offset,
      active_low,
      consumer,
      timeout,
      poll_cb,
      event_cb,
      data,
    );
  }

  late final _gpiod_ctxless_event_monitor_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_ctxless_event_monitor>>(
          'gpiod_ctxless_event_monitor');
  late final _dart_gpiod_ctxless_event_monitor _gpiod_ctxless_event_monitor =
      _gpiod_ctxless_event_monitor_ptr
          .asFunction<_dart_gpiod_ctxless_event_monitor>();

  int gpiod_ctxless_event_monitor_ext(
    ffi.Pointer<ffi.Int8> device,
    int event_type,
    int offset,
    int active_low,
    ffi.Pointer<ffi.Int8> consumer,
    ffi.Pointer<timespec> timeout,
    ffi.Pointer<ffi.NativeFunction<gpiod_ctxless_event_poll_cb>> poll_cb,
    ffi.Pointer<ffi.NativeFunction<gpiod_ctxless_event_handle_cb>> event_cb,
    ffi.Pointer<ffi.Void> data,
    int flags,
  ) {
    return _gpiod_ctxless_event_monitor_ext(
      device,
      event_type,
      offset,
      active_low,
      consumer,
      timeout,
      poll_cb,
      event_cb,
      data,
      flags,
    );
  }

  late final _gpiod_ctxless_event_monitor_ext_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_ctxless_event_monitor_ext>>(
          'gpiod_ctxless_event_monitor_ext');
  late final _dart_gpiod_ctxless_event_monitor_ext
      _gpiod_ctxless_event_monitor_ext = _gpiod_ctxless_event_monitor_ext_ptr
          .asFunction<_dart_gpiod_ctxless_event_monitor_ext>();

  int gpiod_ctxless_event_monitor_multiple(
    ffi.Pointer<ffi.Int8> device,
    int event_type,
    ffi.Pointer<ffi.Uint32> offsets,
    int num_lines,
    int active_low,
    ffi.Pointer<ffi.Int8> consumer,
    ffi.Pointer<timespec> timeout,
    ffi.Pointer<ffi.NativeFunction<gpiod_ctxless_event_poll_cb>> poll_cb,
    ffi.Pointer<ffi.NativeFunction<gpiod_ctxless_event_handle_cb>> event_cb,
    ffi.Pointer<ffi.Void> data,
  ) {
    return _gpiod_ctxless_event_monitor_multiple(
      device,
      event_type,
      offsets,
      num_lines,
      active_low,
      consumer,
      timeout,
      poll_cb,
      event_cb,
      data,
    );
  }

  late final _gpiod_ctxless_event_monitor_multiple_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_ctxless_event_monitor_multiple>>(
          'gpiod_ctxless_event_monitor_multiple');
  late final _dart_gpiod_ctxless_event_monitor_multiple
      _gpiod_ctxless_event_monitor_multiple =
      _gpiod_ctxless_event_monitor_multiple_ptr
          .asFunction<_dart_gpiod_ctxless_event_monitor_multiple>();

  int gpiod_ctxless_event_monitor_multiple_ext(
    ffi.Pointer<ffi.Int8> device,
    int event_type,
    ffi.Pointer<ffi.Uint32> offsets,
    int num_lines,
    int active_low,
    ffi.Pointer<ffi.Int8> consumer,
    ffi.Pointer<timespec> timeout,
    ffi.Pointer<ffi.NativeFunction<gpiod_ctxless_event_poll_cb>> poll_cb,
    ffi.Pointer<ffi.NativeFunction<gpiod_ctxless_event_handle_cb>> event_cb,
    ffi.Pointer<ffi.Void> data,
    int flags,
  ) {
    return _gpiod_ctxless_event_monitor_multiple_ext(
      device,
      event_type,
      offsets,
      num_lines,
      active_low,
      consumer,
      timeout,
      poll_cb,
      event_cb,
      data,
      flags,
    );
  }

  late final _gpiod_ctxless_event_monitor_multiple_ext_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_ctxless_event_monitor_multiple_ext>>(
          'gpiod_ctxless_event_monitor_multiple_ext');
  late final _dart_gpiod_ctxless_event_monitor_multiple_ext
      _gpiod_ctxless_event_monitor_multiple_ext =
      _gpiod_ctxless_event_monitor_multiple_ext_ptr
          .asFunction<_dart_gpiod_ctxless_event_monitor_multiple_ext>();

  int gpiod_ctxless_find_line(
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> chipname,
    int chipname_size,
    ffi.Pointer<ffi.Uint32> offset,
  ) {
    return _gpiod_ctxless_find_line(
      name,
      chipname,
      chipname_size,
      offset,
    );
  }

  late final _gpiod_ctxless_find_line_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_ctxless_find_line>>(
          'gpiod_ctxless_find_line');
  late final _dart_gpiod_ctxless_find_line _gpiod_ctxless_find_line =
      _gpiod_ctxless_find_line_ptr.asFunction<_dart_gpiod_ctxless_find_line>();

  ffi.Pointer<gpiod_chip> gpiod_chip_open(
    ffi.Pointer<ffi.Int8> path,
  ) {
    return _gpiod_chip_open(
      path,
    );
  }

  late final _gpiod_chip_open_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_chip_open>>('gpiod_chip_open');
  late final _dart_gpiod_chip_open _gpiod_chip_open =
      _gpiod_chip_open_ptr.asFunction<_dart_gpiod_chip_open>();

  ffi.Pointer<gpiod_chip> gpiod_chip_open_by_name(
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _gpiod_chip_open_by_name(
      name,
    );
  }

  late final _gpiod_chip_open_by_name_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_chip_open_by_name>>(
          'gpiod_chip_open_by_name');
  late final _dart_gpiod_chip_open_by_name _gpiod_chip_open_by_name =
      _gpiod_chip_open_by_name_ptr.asFunction<_dart_gpiod_chip_open_by_name>();

  ffi.Pointer<gpiod_chip> gpiod_chip_open_by_number(
    int num,
  ) {
    return _gpiod_chip_open_by_number(
      num,
    );
  }

  late final _gpiod_chip_open_by_number_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_chip_open_by_number>>(
          'gpiod_chip_open_by_number');
  late final _dart_gpiod_chip_open_by_number _gpiod_chip_open_by_number =
      _gpiod_chip_open_by_number_ptr
          .asFunction<_dart_gpiod_chip_open_by_number>();

  ffi.Pointer<gpiod_chip> gpiod_chip_open_by_label(
    ffi.Pointer<ffi.Int8> label,
  ) {
    return _gpiod_chip_open_by_label(
      label,
    );
  }

  late final _gpiod_chip_open_by_label_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_chip_open_by_label>>(
          'gpiod_chip_open_by_label');
  late final _dart_gpiod_chip_open_by_label _gpiod_chip_open_by_label =
      _gpiod_chip_open_by_label_ptr
          .asFunction<_dart_gpiod_chip_open_by_label>();

  ffi.Pointer<gpiod_chip> gpiod_chip_open_lookup(
    ffi.Pointer<ffi.Int8> descr,
  ) {
    return _gpiod_chip_open_lookup(
      descr,
    );
  }

  late final _gpiod_chip_open_lookup_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_chip_open_lookup>>(
          'gpiod_chip_open_lookup');
  late final _dart_gpiod_chip_open_lookup _gpiod_chip_open_lookup =
      _gpiod_chip_open_lookup_ptr.asFunction<_dart_gpiod_chip_open_lookup>();

  void gpiod_chip_close(
    ffi.Pointer<gpiod_chip> chip,
  ) {
    return _gpiod_chip_close(
      chip,
    );
  }

  late final _gpiod_chip_close_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_chip_close>>('gpiod_chip_close');
  late final _dart_gpiod_chip_close _gpiod_chip_close =
      _gpiod_chip_close_ptr.asFunction<_dart_gpiod_chip_close>();

  ffi.Pointer<ffi.Int8> gpiod_chip_name(
    ffi.Pointer<gpiod_chip> chip,
  ) {
    return _gpiod_chip_name(
      chip,
    );
  }

  late final _gpiod_chip_name_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_chip_name>>('gpiod_chip_name');
  late final _dart_gpiod_chip_name _gpiod_chip_name =
      _gpiod_chip_name_ptr.asFunction<_dart_gpiod_chip_name>();

  ffi.Pointer<ffi.Int8> gpiod_chip_label(
    ffi.Pointer<gpiod_chip> chip,
  ) {
    return _gpiod_chip_label(
      chip,
    );
  }

  late final _gpiod_chip_label_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_chip_label>>('gpiod_chip_label');
  late final _dart_gpiod_chip_label _gpiod_chip_label =
      _gpiod_chip_label_ptr.asFunction<_dart_gpiod_chip_label>();

  int gpiod_chip_num_lines(
    ffi.Pointer<gpiod_chip> chip,
  ) {
    return _gpiod_chip_num_lines(
      chip,
    );
  }

  late final _gpiod_chip_num_lines_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_chip_num_lines>>(
          'gpiod_chip_num_lines');
  late final _dart_gpiod_chip_num_lines _gpiod_chip_num_lines =
      _gpiod_chip_num_lines_ptr.asFunction<_dart_gpiod_chip_num_lines>();

  ffi.Pointer<gpiod_line> gpiod_chip_get_line(
    ffi.Pointer<gpiod_chip> chip,
    int offset,
  ) {
    return _gpiod_chip_get_line(
      chip,
      offset,
    );
  }

  late final _gpiod_chip_get_line_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_chip_get_line>>(
          'gpiod_chip_get_line');
  late final _dart_gpiod_chip_get_line _gpiod_chip_get_line =
      _gpiod_chip_get_line_ptr.asFunction<_dart_gpiod_chip_get_line>();

  int gpiod_chip_get_lines(
    ffi.Pointer<gpiod_chip> chip,
    ffi.Pointer<ffi.Uint32> offsets,
    int num_offsets,
    ffi.Pointer<gpiod_line_bulk> bulk,
  ) {
    return _gpiod_chip_get_lines(
      chip,
      offsets,
      num_offsets,
      bulk,
    );
  }

  late final _gpiod_chip_get_lines_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_chip_get_lines>>(
          'gpiod_chip_get_lines');
  late final _dart_gpiod_chip_get_lines _gpiod_chip_get_lines =
      _gpiod_chip_get_lines_ptr.asFunction<_dart_gpiod_chip_get_lines>();

  int gpiod_chip_get_all_lines(
    ffi.Pointer<gpiod_chip> chip,
    ffi.Pointer<gpiod_line_bulk> bulk,
  ) {
    return _gpiod_chip_get_all_lines(
      chip,
      bulk,
    );
  }

  late final _gpiod_chip_get_all_lines_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_chip_get_all_lines>>(
          'gpiod_chip_get_all_lines');
  late final _dart_gpiod_chip_get_all_lines _gpiod_chip_get_all_lines =
      _gpiod_chip_get_all_lines_ptr
          .asFunction<_dart_gpiod_chip_get_all_lines>();

  ffi.Pointer<gpiod_line> gpiod_chip_find_line(
    ffi.Pointer<gpiod_chip> chip,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _gpiod_chip_find_line(
      chip,
      name,
    );
  }

  late final _gpiod_chip_find_line_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_chip_find_line>>(
          'gpiod_chip_find_line');
  late final _dart_gpiod_chip_find_line _gpiod_chip_find_line =
      _gpiod_chip_find_line_ptr.asFunction<_dart_gpiod_chip_find_line>();

  int gpiod_chip_find_lines(
    ffi.Pointer<gpiod_chip> chip,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> names,
    ffi.Pointer<gpiod_line_bulk> bulk,
  ) {
    return _gpiod_chip_find_lines(
      chip,
      names,
      bulk,
    );
  }

  late final _gpiod_chip_find_lines_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_chip_find_lines>>(
          'gpiod_chip_find_lines');
  late final _dart_gpiod_chip_find_lines _gpiod_chip_find_lines =
      _gpiod_chip_find_lines_ptr.asFunction<_dart_gpiod_chip_find_lines>();

  int gpiod_line_offset(
    ffi.Pointer<gpiod_line> line,
  ) {
    return _gpiod_line_offset(
      line,
    );
  }

  late final _gpiod_line_offset_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_line_offset>>('gpiod_line_offset');
  late final _dart_gpiod_line_offset _gpiod_line_offset =
      _gpiod_line_offset_ptr.asFunction<_dart_gpiod_line_offset>();

  ffi.Pointer<ffi.Int8> gpiod_line_name(
    ffi.Pointer<gpiod_line> line,
  ) {
    return _gpiod_line_name(
      line,
    );
  }

  late final _gpiod_line_name_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_line_name>>('gpiod_line_name');
  late final _dart_gpiod_line_name _gpiod_line_name =
      _gpiod_line_name_ptr.asFunction<_dart_gpiod_line_name>();

  ffi.Pointer<ffi.Int8> gpiod_line_consumer(
    ffi.Pointer<gpiod_line> line,
  ) {
    return _gpiod_line_consumer(
      line,
    );
  }

  late final _gpiod_line_consumer_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_line_consumer>>(
          'gpiod_line_consumer');
  late final _dart_gpiod_line_consumer _gpiod_line_consumer =
      _gpiod_line_consumer_ptr.asFunction<_dart_gpiod_line_consumer>();

  int gpiod_line_direction(
    ffi.Pointer<gpiod_line> line,
  ) {
    return _gpiod_line_direction(
      line,
    );
  }

  late final _gpiod_line_direction_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_line_direction>>(
          'gpiod_line_direction');
  late final _dart_gpiod_line_direction _gpiod_line_direction =
      _gpiod_line_direction_ptr.asFunction<_dart_gpiod_line_direction>();

  int gpiod_line_active_state(
    ffi.Pointer<gpiod_line> line,
  ) {
    return _gpiod_line_active_state(
      line,
    );
  }

  late final _gpiod_line_active_state_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_line_active_state>>(
          'gpiod_line_active_state');
  late final _dart_gpiod_line_active_state _gpiod_line_active_state =
      _gpiod_line_active_state_ptr.asFunction<_dart_gpiod_line_active_state>();

  int gpiod_line_bias(
    ffi.Pointer<gpiod_line> line,
  ) {
    return _gpiod_line_bias(
      line,
    );
  }

  late final _gpiod_line_bias_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_line_bias>>('gpiod_line_bias');
  late final _dart_gpiod_line_bias _gpiod_line_bias =
      _gpiod_line_bias_ptr.asFunction<_dart_gpiod_line_bias>();

  int gpiod_line_is_used(
    ffi.Pointer<gpiod_line> line,
  ) {
    return _gpiod_line_is_used(
      line,
    );
  }

  late final _gpiod_line_is_used_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_line_is_used>>('gpiod_line_is_used');
  late final _dart_gpiod_line_is_used _gpiod_line_is_used =
      _gpiod_line_is_used_ptr.asFunction<_dart_gpiod_line_is_used>();

  int gpiod_line_is_open_drain(
    ffi.Pointer<gpiod_line> line,
  ) {
    return _gpiod_line_is_open_drain(
      line,
    );
  }

  late final _gpiod_line_is_open_drain_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_line_is_open_drain>>(
          'gpiod_line_is_open_drain');
  late final _dart_gpiod_line_is_open_drain _gpiod_line_is_open_drain =
      _gpiod_line_is_open_drain_ptr
          .asFunction<_dart_gpiod_line_is_open_drain>();

  int gpiod_line_is_open_source(
    ffi.Pointer<gpiod_line> line,
  ) {
    return _gpiod_line_is_open_source(
      line,
    );
  }

  late final _gpiod_line_is_open_source_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_line_is_open_source>>(
          'gpiod_line_is_open_source');
  late final _dart_gpiod_line_is_open_source _gpiod_line_is_open_source =
      _gpiod_line_is_open_source_ptr
          .asFunction<_dart_gpiod_line_is_open_source>();

  int gpiod_line_update(
    ffi.Pointer<gpiod_line> line,
  ) {
    return _gpiod_line_update(
      line,
    );
  }

  late final _gpiod_line_update_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_line_update>>('gpiod_line_update');
  late final _dart_gpiod_line_update _gpiod_line_update =
      _gpiod_line_update_ptr.asFunction<_dart_gpiod_line_update>();

  int gpiod_line_needs_update(
    ffi.Pointer<gpiod_line> line,
  ) {
    return _gpiod_line_needs_update(
      line,
    );
  }

  late final _gpiod_line_needs_update_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_line_needs_update>>(
          'gpiod_line_needs_update');
  late final _dart_gpiod_line_needs_update _gpiod_line_needs_update =
      _gpiod_line_needs_update_ptr.asFunction<_dart_gpiod_line_needs_update>();

  int gpiod_line_request(
    ffi.Pointer<gpiod_line> line,
    ffi.Pointer<gpiod_line_request_config> config,
    int default_val,
  ) {
    return _gpiod_line_request(
      line,
      config,
      default_val,
    );
  }

  late final _gpiod_line_request_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_line_request>>('gpiod_line_request');
  late final _dart_gpiod_line_request _gpiod_line_request =
      _gpiod_line_request_ptr.asFunction<_dart_gpiod_line_request>();

  int gpiod_line_request_input(
    ffi.Pointer<gpiod_line> line,
    ffi.Pointer<ffi.Int8> consumer,
  ) {
    return _gpiod_line_request_input(
      line,
      consumer,
    );
  }

  late final _gpiod_line_request_input_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_line_request_input>>(
          'gpiod_line_request_input');
  late final _dart_gpiod_line_request_input _gpiod_line_request_input =
      _gpiod_line_request_input_ptr
          .asFunction<_dart_gpiod_line_request_input>();

  int gpiod_line_request_output(
    ffi.Pointer<gpiod_line> line,
    ffi.Pointer<ffi.Int8> consumer,
    int default_val,
  ) {
    return _gpiod_line_request_output(
      line,
      consumer,
      default_val,
    );
  }

  late final _gpiod_line_request_output_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_line_request_output>>(
          'gpiod_line_request_output');
  late final _dart_gpiod_line_request_output _gpiod_line_request_output =
      _gpiod_line_request_output_ptr
          .asFunction<_dart_gpiod_line_request_output>();

  int gpiod_line_request_rising_edge_events(
    ffi.Pointer<gpiod_line> line,
    ffi.Pointer<ffi.Int8> consumer,
  ) {
    return _gpiod_line_request_rising_edge_events(
      line,
      consumer,
    );
  }

  late final _gpiod_line_request_rising_edge_events_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_line_request_rising_edge_events>>(
          'gpiod_line_request_rising_edge_events');
  late final _dart_gpiod_line_request_rising_edge_events
      _gpiod_line_request_rising_edge_events =
      _gpiod_line_request_rising_edge_events_ptr
          .asFunction<_dart_gpiod_line_request_rising_edge_events>();

  int gpiod_line_request_falling_edge_events(
    ffi.Pointer<gpiod_line> line,
    ffi.Pointer<ffi.Int8> consumer,
  ) {
    return _gpiod_line_request_falling_edge_events(
      line,
      consumer,
    );
  }

  late final _gpiod_line_request_falling_edge_events_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_line_request_falling_edge_events>>(
          'gpiod_line_request_falling_edge_events');
  late final _dart_gpiod_line_request_falling_edge_events
      _gpiod_line_request_falling_edge_events =
      _gpiod_line_request_falling_edge_events_ptr
          .asFunction<_dart_gpiod_line_request_falling_edge_events>();

  int gpiod_line_request_both_edges_events(
    ffi.Pointer<gpiod_line> line,
    ffi.Pointer<ffi.Int8> consumer,
  ) {
    return _gpiod_line_request_both_edges_events(
      line,
      consumer,
    );
  }

  late final _gpiod_line_request_both_edges_events_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_line_request_both_edges_events>>(
          'gpiod_line_request_both_edges_events');
  late final _dart_gpiod_line_request_both_edges_events
      _gpiod_line_request_both_edges_events =
      _gpiod_line_request_both_edges_events_ptr
          .asFunction<_dart_gpiod_line_request_both_edges_events>();

  int gpiod_line_request_input_flags(
    ffi.Pointer<gpiod_line> line,
    ffi.Pointer<ffi.Int8> consumer,
    int flags,
  ) {
    return _gpiod_line_request_input_flags(
      line,
      consumer,
      flags,
    );
  }

  late final _gpiod_line_request_input_flags_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_line_request_input_flags>>(
          'gpiod_line_request_input_flags');
  late final _dart_gpiod_line_request_input_flags
      _gpiod_line_request_input_flags = _gpiod_line_request_input_flags_ptr
          .asFunction<_dart_gpiod_line_request_input_flags>();

  int gpiod_line_request_output_flags(
    ffi.Pointer<gpiod_line> line,
    ffi.Pointer<ffi.Int8> consumer,
    int flags,
    int default_val,
  ) {
    return _gpiod_line_request_output_flags(
      line,
      consumer,
      flags,
      default_val,
    );
  }

  late final _gpiod_line_request_output_flags_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_line_request_output_flags>>(
          'gpiod_line_request_output_flags');
  late final _dart_gpiod_line_request_output_flags
      _gpiod_line_request_output_flags = _gpiod_line_request_output_flags_ptr
          .asFunction<_dart_gpiod_line_request_output_flags>();

  int gpiod_line_request_rising_edge_events_flags(
    ffi.Pointer<gpiod_line> line,
    ffi.Pointer<ffi.Int8> consumer,
    int flags,
  ) {
    return _gpiod_line_request_rising_edge_events_flags(
      line,
      consumer,
      flags,
    );
  }

  late final _gpiod_line_request_rising_edge_events_flags_ptr = _lookup<
          ffi.NativeFunction<_c_gpiod_line_request_rising_edge_events_flags>>(
      'gpiod_line_request_rising_edge_events_flags');
  late final _dart_gpiod_line_request_rising_edge_events_flags
      _gpiod_line_request_rising_edge_events_flags =
      _gpiod_line_request_rising_edge_events_flags_ptr
          .asFunction<_dart_gpiod_line_request_rising_edge_events_flags>();

  int gpiod_line_request_falling_edge_events_flags(
    ffi.Pointer<gpiod_line> line,
    ffi.Pointer<ffi.Int8> consumer,
    int flags,
  ) {
    return _gpiod_line_request_falling_edge_events_flags(
      line,
      consumer,
      flags,
    );
  }

  late final _gpiod_line_request_falling_edge_events_flags_ptr = _lookup<
          ffi.NativeFunction<_c_gpiod_line_request_falling_edge_events_flags>>(
      'gpiod_line_request_falling_edge_events_flags');
  late final _dart_gpiod_line_request_falling_edge_events_flags
      _gpiod_line_request_falling_edge_events_flags =
      _gpiod_line_request_falling_edge_events_flags_ptr
          .asFunction<_dart_gpiod_line_request_falling_edge_events_flags>();

  int gpiod_line_request_both_edges_events_flags(
    ffi.Pointer<gpiod_line> line,
    ffi.Pointer<ffi.Int8> consumer,
    int flags,
  ) {
    return _gpiod_line_request_both_edges_events_flags(
      line,
      consumer,
      flags,
    );
  }

  late final _gpiod_line_request_both_edges_events_flags_ptr = _lookup<
          ffi.NativeFunction<_c_gpiod_line_request_both_edges_events_flags>>(
      'gpiod_line_request_both_edges_events_flags');
  late final _dart_gpiod_line_request_both_edges_events_flags
      _gpiod_line_request_both_edges_events_flags =
      _gpiod_line_request_both_edges_events_flags_ptr
          .asFunction<_dart_gpiod_line_request_both_edges_events_flags>();

  int gpiod_line_request_bulk(
    ffi.Pointer<gpiod_line_bulk> bulk,
    ffi.Pointer<gpiod_line_request_config> config,
    ffi.Pointer<ffi.Int32> default_vals,
  ) {
    return _gpiod_line_request_bulk(
      bulk,
      config,
      default_vals,
    );
  }

  late final _gpiod_line_request_bulk_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_line_request_bulk>>(
          'gpiod_line_request_bulk');
  late final _dart_gpiod_line_request_bulk _gpiod_line_request_bulk =
      _gpiod_line_request_bulk_ptr.asFunction<_dart_gpiod_line_request_bulk>();

  int gpiod_line_request_bulk_input(
    ffi.Pointer<gpiod_line_bulk> bulk,
    ffi.Pointer<ffi.Int8> consumer,
  ) {
    return _gpiod_line_request_bulk_input(
      bulk,
      consumer,
    );
  }

  late final _gpiod_line_request_bulk_input_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_line_request_bulk_input>>(
          'gpiod_line_request_bulk_input');
  late final _dart_gpiod_line_request_bulk_input
      _gpiod_line_request_bulk_input = _gpiod_line_request_bulk_input_ptr
          .asFunction<_dart_gpiod_line_request_bulk_input>();

  int gpiod_line_request_bulk_output(
    ffi.Pointer<gpiod_line_bulk> bulk,
    ffi.Pointer<ffi.Int8> consumer,
    ffi.Pointer<ffi.Int32> default_vals,
  ) {
    return _gpiod_line_request_bulk_output(
      bulk,
      consumer,
      default_vals,
    );
  }

  late final _gpiod_line_request_bulk_output_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_line_request_bulk_output>>(
          'gpiod_line_request_bulk_output');
  late final _dart_gpiod_line_request_bulk_output
      _gpiod_line_request_bulk_output = _gpiod_line_request_bulk_output_ptr
          .asFunction<_dart_gpiod_line_request_bulk_output>();

  int gpiod_line_request_bulk_rising_edge_events(
    ffi.Pointer<gpiod_line_bulk> bulk,
    ffi.Pointer<ffi.Int8> consumer,
  ) {
    return _gpiod_line_request_bulk_rising_edge_events(
      bulk,
      consumer,
    );
  }

  late final _gpiod_line_request_bulk_rising_edge_events_ptr = _lookup<
          ffi.NativeFunction<_c_gpiod_line_request_bulk_rising_edge_events>>(
      'gpiod_line_request_bulk_rising_edge_events');
  late final _dart_gpiod_line_request_bulk_rising_edge_events
      _gpiod_line_request_bulk_rising_edge_events =
      _gpiod_line_request_bulk_rising_edge_events_ptr
          .asFunction<_dart_gpiod_line_request_bulk_rising_edge_events>();

  int gpiod_line_request_bulk_falling_edge_events(
    ffi.Pointer<gpiod_line_bulk> bulk,
    ffi.Pointer<ffi.Int8> consumer,
  ) {
    return _gpiod_line_request_bulk_falling_edge_events(
      bulk,
      consumer,
    );
  }

  late final _gpiod_line_request_bulk_falling_edge_events_ptr = _lookup<
          ffi.NativeFunction<_c_gpiod_line_request_bulk_falling_edge_events>>(
      'gpiod_line_request_bulk_falling_edge_events');
  late final _dart_gpiod_line_request_bulk_falling_edge_events
      _gpiod_line_request_bulk_falling_edge_events =
      _gpiod_line_request_bulk_falling_edge_events_ptr
          .asFunction<_dart_gpiod_line_request_bulk_falling_edge_events>();

  int gpiod_line_request_bulk_both_edges_events(
    ffi.Pointer<gpiod_line_bulk> bulk,
    ffi.Pointer<ffi.Int8> consumer,
  ) {
    return _gpiod_line_request_bulk_both_edges_events(
      bulk,
      consumer,
    );
  }

  late final _gpiod_line_request_bulk_both_edges_events_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_line_request_bulk_both_edges_events>>(
          'gpiod_line_request_bulk_both_edges_events');
  late final _dart_gpiod_line_request_bulk_both_edges_events
      _gpiod_line_request_bulk_both_edges_events =
      _gpiod_line_request_bulk_both_edges_events_ptr
          .asFunction<_dart_gpiod_line_request_bulk_both_edges_events>();

  int gpiod_line_request_bulk_input_flags(
    ffi.Pointer<gpiod_line_bulk> bulk,
    ffi.Pointer<ffi.Int8> consumer,
    int flags,
  ) {
    return _gpiod_line_request_bulk_input_flags(
      bulk,
      consumer,
      flags,
    );
  }

  late final _gpiod_line_request_bulk_input_flags_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_line_request_bulk_input_flags>>(
          'gpiod_line_request_bulk_input_flags');
  late final _dart_gpiod_line_request_bulk_input_flags
      _gpiod_line_request_bulk_input_flags =
      _gpiod_line_request_bulk_input_flags_ptr
          .asFunction<_dart_gpiod_line_request_bulk_input_flags>();

  int gpiod_line_request_bulk_output_flags(
    ffi.Pointer<gpiod_line_bulk> bulk,
    ffi.Pointer<ffi.Int8> consumer,
    int flags,
    ffi.Pointer<ffi.Int32> default_vals,
  ) {
    return _gpiod_line_request_bulk_output_flags(
      bulk,
      consumer,
      flags,
      default_vals,
    );
  }

  late final _gpiod_line_request_bulk_output_flags_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_line_request_bulk_output_flags>>(
          'gpiod_line_request_bulk_output_flags');
  late final _dart_gpiod_line_request_bulk_output_flags
      _gpiod_line_request_bulk_output_flags =
      _gpiod_line_request_bulk_output_flags_ptr
          .asFunction<_dart_gpiod_line_request_bulk_output_flags>();

  int gpiod_line_request_bulk_rising_edge_events_flags(
    ffi.Pointer<gpiod_line_bulk> bulk,
    ffi.Pointer<ffi.Int8> consumer,
    int flags,
  ) {
    return _gpiod_line_request_bulk_rising_edge_events_flags(
      bulk,
      consumer,
      flags,
    );
  }

  late final _gpiod_line_request_bulk_rising_edge_events_flags_ptr = _lookup<
          ffi.NativeFunction<
              _c_gpiod_line_request_bulk_rising_edge_events_flags>>(
      'gpiod_line_request_bulk_rising_edge_events_flags');
  late final _dart_gpiod_line_request_bulk_rising_edge_events_flags
      _gpiod_line_request_bulk_rising_edge_events_flags =
      _gpiod_line_request_bulk_rising_edge_events_flags_ptr
          .asFunction<_dart_gpiod_line_request_bulk_rising_edge_events_flags>();

  int gpiod_line_request_bulk_falling_edge_events_flags(
    ffi.Pointer<gpiod_line_bulk> bulk,
    ffi.Pointer<ffi.Int8> consumer,
    int flags,
  ) {
    return _gpiod_line_request_bulk_falling_edge_events_flags(
      bulk,
      consumer,
      flags,
    );
  }

  late final _gpiod_line_request_bulk_falling_edge_events_flags_ptr = _lookup<
          ffi.NativeFunction<
              _c_gpiod_line_request_bulk_falling_edge_events_flags>>(
      'gpiod_line_request_bulk_falling_edge_events_flags');
  late final _dart_gpiod_line_request_bulk_falling_edge_events_flags
      _gpiod_line_request_bulk_falling_edge_events_flags =
      _gpiod_line_request_bulk_falling_edge_events_flags_ptr.asFunction<
          _dart_gpiod_line_request_bulk_falling_edge_events_flags>();

  int gpiod_line_request_bulk_both_edges_events_flags(
    ffi.Pointer<gpiod_line_bulk> bulk,
    ffi.Pointer<ffi.Int8> consumer,
    int flags,
  ) {
    return _gpiod_line_request_bulk_both_edges_events_flags(
      bulk,
      consumer,
      flags,
    );
  }

  late final _gpiod_line_request_bulk_both_edges_events_flags_ptr = _lookup<
          ffi.NativeFunction<
              _c_gpiod_line_request_bulk_both_edges_events_flags>>(
      'gpiod_line_request_bulk_both_edges_events_flags');
  late final _dart_gpiod_line_request_bulk_both_edges_events_flags
      _gpiod_line_request_bulk_both_edges_events_flags =
      _gpiod_line_request_bulk_both_edges_events_flags_ptr
          .asFunction<_dart_gpiod_line_request_bulk_both_edges_events_flags>();

  void gpiod_line_release(
    ffi.Pointer<gpiod_line> line,
  ) {
    return _gpiod_line_release(
      line,
    );
  }

  late final _gpiod_line_release_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_line_release>>('gpiod_line_release');
  late final _dart_gpiod_line_release _gpiod_line_release =
      _gpiod_line_release_ptr.asFunction<_dart_gpiod_line_release>();

  void gpiod_line_release_bulk(
    ffi.Pointer<gpiod_line_bulk> bulk,
  ) {
    return _gpiod_line_release_bulk(
      bulk,
    );
  }

  late final _gpiod_line_release_bulk_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_line_release_bulk>>(
          'gpiod_line_release_bulk');
  late final _dart_gpiod_line_release_bulk _gpiod_line_release_bulk =
      _gpiod_line_release_bulk_ptr.asFunction<_dart_gpiod_line_release_bulk>();

  int gpiod_line_is_requested(
    ffi.Pointer<gpiod_line> line,
  ) {
    return _gpiod_line_is_requested(
      line,
    );
  }

  late final _gpiod_line_is_requested_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_line_is_requested>>(
          'gpiod_line_is_requested');
  late final _dart_gpiod_line_is_requested _gpiod_line_is_requested =
      _gpiod_line_is_requested_ptr.asFunction<_dart_gpiod_line_is_requested>();

  int gpiod_line_is_free(
    ffi.Pointer<gpiod_line> line,
  ) {
    return _gpiod_line_is_free(
      line,
    );
  }

  late final _gpiod_line_is_free_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_line_is_free>>('gpiod_line_is_free');
  late final _dart_gpiod_line_is_free _gpiod_line_is_free =
      _gpiod_line_is_free_ptr.asFunction<_dart_gpiod_line_is_free>();

  int gpiod_line_get_value(
    ffi.Pointer<gpiod_line> line,
  ) {
    return _gpiod_line_get_value(
      line,
    );
  }

  late final _gpiod_line_get_value_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_line_get_value>>(
          'gpiod_line_get_value');
  late final _dart_gpiod_line_get_value _gpiod_line_get_value =
      _gpiod_line_get_value_ptr.asFunction<_dart_gpiod_line_get_value>();

  int gpiod_line_get_value_bulk(
    ffi.Pointer<gpiod_line_bulk> bulk,
    ffi.Pointer<ffi.Int32> values,
  ) {
    return _gpiod_line_get_value_bulk(
      bulk,
      values,
    );
  }

  late final _gpiod_line_get_value_bulk_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_line_get_value_bulk>>(
          'gpiod_line_get_value_bulk');
  late final _dart_gpiod_line_get_value_bulk _gpiod_line_get_value_bulk =
      _gpiod_line_get_value_bulk_ptr
          .asFunction<_dart_gpiod_line_get_value_bulk>();

  int gpiod_line_set_value(
    ffi.Pointer<gpiod_line> line,
    int value,
  ) {
    return _gpiod_line_set_value(
      line,
      value,
    );
  }

  late final _gpiod_line_set_value_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_line_set_value>>(
          'gpiod_line_set_value');
  late final _dart_gpiod_line_set_value _gpiod_line_set_value =
      _gpiod_line_set_value_ptr.asFunction<_dart_gpiod_line_set_value>();

  int gpiod_line_set_value_bulk(
    ffi.Pointer<gpiod_line_bulk> bulk,
    ffi.Pointer<ffi.Int32> values,
  ) {
    return _gpiod_line_set_value_bulk(
      bulk,
      values,
    );
  }

  late final _gpiod_line_set_value_bulk_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_line_set_value_bulk>>(
          'gpiod_line_set_value_bulk');
  late final _dart_gpiod_line_set_value_bulk _gpiod_line_set_value_bulk =
      _gpiod_line_set_value_bulk_ptr
          .asFunction<_dart_gpiod_line_set_value_bulk>();

  int gpiod_line_set_config(
    ffi.Pointer<gpiod_line> line,
    int direction,
    int flags,
    int value,
  ) {
    return _gpiod_line_set_config(
      line,
      direction,
      flags,
      value,
    );
  }

  late final _gpiod_line_set_config_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_line_set_config>>(
          'gpiod_line_set_config');
  late final _dart_gpiod_line_set_config _gpiod_line_set_config =
      _gpiod_line_set_config_ptr.asFunction<_dart_gpiod_line_set_config>();

  int gpiod_line_set_config_bulk(
    ffi.Pointer<gpiod_line_bulk> bulk,
    int direction,
    int flags,
    ffi.Pointer<ffi.Int32> values,
  ) {
    return _gpiod_line_set_config_bulk(
      bulk,
      direction,
      flags,
      values,
    );
  }

  late final _gpiod_line_set_config_bulk_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_line_set_config_bulk>>(
          'gpiod_line_set_config_bulk');
  late final _dart_gpiod_line_set_config_bulk _gpiod_line_set_config_bulk =
      _gpiod_line_set_config_bulk_ptr
          .asFunction<_dart_gpiod_line_set_config_bulk>();

  int gpiod_line_set_flags(
    ffi.Pointer<gpiod_line> line,
    int flags,
  ) {
    return _gpiod_line_set_flags(
      line,
      flags,
    );
  }

  late final _gpiod_line_set_flags_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_line_set_flags>>(
          'gpiod_line_set_flags');
  late final _dart_gpiod_line_set_flags _gpiod_line_set_flags =
      _gpiod_line_set_flags_ptr.asFunction<_dart_gpiod_line_set_flags>();

  int gpiod_line_set_flags_bulk(
    ffi.Pointer<gpiod_line_bulk> bulk,
    int flags,
  ) {
    return _gpiod_line_set_flags_bulk(
      bulk,
      flags,
    );
  }

  late final _gpiod_line_set_flags_bulk_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_line_set_flags_bulk>>(
          'gpiod_line_set_flags_bulk');
  late final _dart_gpiod_line_set_flags_bulk _gpiod_line_set_flags_bulk =
      _gpiod_line_set_flags_bulk_ptr
          .asFunction<_dart_gpiod_line_set_flags_bulk>();

  int gpiod_line_set_direction_input(
    ffi.Pointer<gpiod_line> line,
  ) {
    return _gpiod_line_set_direction_input(
      line,
    );
  }

  late final _gpiod_line_set_direction_input_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_line_set_direction_input>>(
          'gpiod_line_set_direction_input');
  late final _dart_gpiod_line_set_direction_input
      _gpiod_line_set_direction_input = _gpiod_line_set_direction_input_ptr
          .asFunction<_dart_gpiod_line_set_direction_input>();

  int gpiod_line_set_direction_input_bulk(
    ffi.Pointer<gpiod_line_bulk> bulk,
  ) {
    return _gpiod_line_set_direction_input_bulk(
      bulk,
    );
  }

  late final _gpiod_line_set_direction_input_bulk_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_line_set_direction_input_bulk>>(
          'gpiod_line_set_direction_input_bulk');
  late final _dart_gpiod_line_set_direction_input_bulk
      _gpiod_line_set_direction_input_bulk =
      _gpiod_line_set_direction_input_bulk_ptr
          .asFunction<_dart_gpiod_line_set_direction_input_bulk>();

  int gpiod_line_set_direction_output(
    ffi.Pointer<gpiod_line> line,
    int value,
  ) {
    return _gpiod_line_set_direction_output(
      line,
      value,
    );
  }

  late final _gpiod_line_set_direction_output_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_line_set_direction_output>>(
          'gpiod_line_set_direction_output');
  late final _dart_gpiod_line_set_direction_output
      _gpiod_line_set_direction_output = _gpiod_line_set_direction_output_ptr
          .asFunction<_dart_gpiod_line_set_direction_output>();

  int gpiod_line_set_direction_output_bulk(
    ffi.Pointer<gpiod_line_bulk> bulk,
    ffi.Pointer<ffi.Int32> values,
  ) {
    return _gpiod_line_set_direction_output_bulk(
      bulk,
      values,
    );
  }

  late final _gpiod_line_set_direction_output_bulk_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_line_set_direction_output_bulk>>(
          'gpiod_line_set_direction_output_bulk');
  late final _dart_gpiod_line_set_direction_output_bulk
      _gpiod_line_set_direction_output_bulk =
      _gpiod_line_set_direction_output_bulk_ptr
          .asFunction<_dart_gpiod_line_set_direction_output_bulk>();

  int gpiod_line_event_wait(
    ffi.Pointer<gpiod_line> line,
    ffi.Pointer<timespec> timeout,
  ) {
    return _gpiod_line_event_wait(
      line,
      timeout,
    );
  }

  late final _gpiod_line_event_wait_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_line_event_wait>>(
          'gpiod_line_event_wait');
  late final _dart_gpiod_line_event_wait _gpiod_line_event_wait =
      _gpiod_line_event_wait_ptr.asFunction<_dart_gpiod_line_event_wait>();

  int gpiod_line_event_wait_bulk(
    ffi.Pointer<gpiod_line_bulk> bulk,
    ffi.Pointer<timespec> timeout,
    ffi.Pointer<gpiod_line_bulk> event_bulk,
  ) {
    return _gpiod_line_event_wait_bulk(
      bulk,
      timeout,
      event_bulk,
    );
  }

  late final _gpiod_line_event_wait_bulk_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_line_event_wait_bulk>>(
          'gpiod_line_event_wait_bulk');
  late final _dart_gpiod_line_event_wait_bulk _gpiod_line_event_wait_bulk =
      _gpiod_line_event_wait_bulk_ptr
          .asFunction<_dart_gpiod_line_event_wait_bulk>();

  int gpiod_line_event_read(
    ffi.Pointer<gpiod_line> line,
    ffi.Pointer<gpiod_line_event> event,
  ) {
    return _gpiod_line_event_read(
      line,
      event,
    );
  }

  late final _gpiod_line_event_read_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_line_event_read>>(
          'gpiod_line_event_read');
  late final _dart_gpiod_line_event_read _gpiod_line_event_read =
      _gpiod_line_event_read_ptr.asFunction<_dart_gpiod_line_event_read>();

  int gpiod_line_event_read_multiple(
    ffi.Pointer<gpiod_line> line,
    ffi.Pointer<gpiod_line_event> events,
    int num_events,
  ) {
    return _gpiod_line_event_read_multiple(
      line,
      events,
      num_events,
    );
  }

  late final _gpiod_line_event_read_multiple_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_line_event_read_multiple>>(
          'gpiod_line_event_read_multiple');
  late final _dart_gpiod_line_event_read_multiple
      _gpiod_line_event_read_multiple = _gpiod_line_event_read_multiple_ptr
          .asFunction<_dart_gpiod_line_event_read_multiple>();

  int gpiod_line_event_get_fd(
    ffi.Pointer<gpiod_line> line,
  ) {
    return _gpiod_line_event_get_fd(
      line,
    );
  }

  late final _gpiod_line_event_get_fd_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_line_event_get_fd>>(
          'gpiod_line_event_get_fd');
  late final _dart_gpiod_line_event_get_fd _gpiod_line_event_get_fd =
      _gpiod_line_event_get_fd_ptr.asFunction<_dart_gpiod_line_event_get_fd>();

  int gpiod_line_event_read_fd(
    int fd,
    ffi.Pointer<gpiod_line_event> event,
  ) {
    return _gpiod_line_event_read_fd(
      fd,
      event,
    );
  }

  late final _gpiod_line_event_read_fd_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_line_event_read_fd>>(
          'gpiod_line_event_read_fd');
  late final _dart_gpiod_line_event_read_fd _gpiod_line_event_read_fd =
      _gpiod_line_event_read_fd_ptr
          .asFunction<_dart_gpiod_line_event_read_fd>();

  int gpiod_line_event_read_fd_multiple(
    int fd,
    ffi.Pointer<gpiod_line_event> events,
    int num_events,
  ) {
    return _gpiod_line_event_read_fd_multiple(
      fd,
      events,
      num_events,
    );
  }

  late final _gpiod_line_event_read_fd_multiple_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_line_event_read_fd_multiple>>(
          'gpiod_line_event_read_fd_multiple');
  late final _dart_gpiod_line_event_read_fd_multiple
      _gpiod_line_event_read_fd_multiple =
      _gpiod_line_event_read_fd_multiple_ptr
          .asFunction<_dart_gpiod_line_event_read_fd_multiple>();

  ffi.Pointer<gpiod_line> gpiod_line_get(
    ffi.Pointer<ffi.Int8> device,
    int offset,
  ) {
    return _gpiod_line_get(
      device,
      offset,
    );
  }

  late final _gpiod_line_get_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_line_get>>('gpiod_line_get');
  late final _dart_gpiod_line_get _gpiod_line_get =
      _gpiod_line_get_ptr.asFunction<_dart_gpiod_line_get>();

  ffi.Pointer<gpiod_line> gpiod_line_find(
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _gpiod_line_find(
      name,
    );
  }

  late final _gpiod_line_find_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_line_find>>('gpiod_line_find');
  late final _dart_gpiod_line_find _gpiod_line_find =
      _gpiod_line_find_ptr.asFunction<_dart_gpiod_line_find>();

  void gpiod_line_close_chip(
    ffi.Pointer<gpiod_line> line,
  ) {
    return _gpiod_line_close_chip(
      line,
    );
  }

  late final _gpiod_line_close_chip_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_line_close_chip>>(
          'gpiod_line_close_chip');
  late final _dart_gpiod_line_close_chip _gpiod_line_close_chip =
      _gpiod_line_close_chip_ptr.asFunction<_dart_gpiod_line_close_chip>();

  ffi.Pointer<gpiod_chip> gpiod_line_get_chip(
    ffi.Pointer<gpiod_line> line,
  ) {
    return _gpiod_line_get_chip(
      line,
    );
  }

  late final _gpiod_line_get_chip_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_line_get_chip>>(
          'gpiod_line_get_chip');
  late final _dart_gpiod_line_get_chip _gpiod_line_get_chip =
      _gpiod_line_get_chip_ptr.asFunction<_dart_gpiod_line_get_chip>();

  ffi.Pointer<gpiod_chip_iter> gpiod_chip_iter_new() {
    return _gpiod_chip_iter_new();
  }

  late final _gpiod_chip_iter_new_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_chip_iter_new>>(
          'gpiod_chip_iter_new');
  late final _dart_gpiod_chip_iter_new _gpiod_chip_iter_new =
      _gpiod_chip_iter_new_ptr.asFunction<_dart_gpiod_chip_iter_new>();

  void gpiod_chip_iter_free(
    ffi.Pointer<gpiod_chip_iter> iter,
  ) {
    return _gpiod_chip_iter_free(
      iter,
    );
  }

  late final _gpiod_chip_iter_free_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_chip_iter_free>>(
          'gpiod_chip_iter_free');
  late final _dart_gpiod_chip_iter_free _gpiod_chip_iter_free =
      _gpiod_chip_iter_free_ptr.asFunction<_dart_gpiod_chip_iter_free>();

  void gpiod_chip_iter_free_noclose(
    ffi.Pointer<gpiod_chip_iter> iter,
  ) {
    return _gpiod_chip_iter_free_noclose(
      iter,
    );
  }

  late final _gpiod_chip_iter_free_noclose_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_chip_iter_free_noclose>>(
          'gpiod_chip_iter_free_noclose');
  late final _dart_gpiod_chip_iter_free_noclose _gpiod_chip_iter_free_noclose =
      _gpiod_chip_iter_free_noclose_ptr
          .asFunction<_dart_gpiod_chip_iter_free_noclose>();

  ffi.Pointer<gpiod_chip> gpiod_chip_iter_next(
    ffi.Pointer<gpiod_chip_iter> iter,
  ) {
    return _gpiod_chip_iter_next(
      iter,
    );
  }

  late final _gpiod_chip_iter_next_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_chip_iter_next>>(
          'gpiod_chip_iter_next');
  late final _dart_gpiod_chip_iter_next _gpiod_chip_iter_next =
      _gpiod_chip_iter_next_ptr.asFunction<_dart_gpiod_chip_iter_next>();

  ffi.Pointer<gpiod_chip> gpiod_chip_iter_next_noclose(
    ffi.Pointer<gpiod_chip_iter> iter,
  ) {
    return _gpiod_chip_iter_next_noclose(
      iter,
    );
  }

  late final _gpiod_chip_iter_next_noclose_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_chip_iter_next_noclose>>(
          'gpiod_chip_iter_next_noclose');
  late final _dart_gpiod_chip_iter_next_noclose _gpiod_chip_iter_next_noclose =
      _gpiod_chip_iter_next_noclose_ptr
          .asFunction<_dart_gpiod_chip_iter_next_noclose>();

  ffi.Pointer<gpiod_line_iter> gpiod_line_iter_new(
    ffi.Pointer<gpiod_chip> chip,
  ) {
    return _gpiod_line_iter_new(
      chip,
    );
  }

  late final _gpiod_line_iter_new_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_line_iter_new>>(
          'gpiod_line_iter_new');
  late final _dart_gpiod_line_iter_new _gpiod_line_iter_new =
      _gpiod_line_iter_new_ptr.asFunction<_dart_gpiod_line_iter_new>();

  void gpiod_line_iter_free(
    ffi.Pointer<gpiod_line_iter> iter,
  ) {
    return _gpiod_line_iter_free(
      iter,
    );
  }

  late final _gpiod_line_iter_free_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_line_iter_free>>(
          'gpiod_line_iter_free');
  late final _dart_gpiod_line_iter_free _gpiod_line_iter_free =
      _gpiod_line_iter_free_ptr.asFunction<_dart_gpiod_line_iter_free>();

  ffi.Pointer<gpiod_line> gpiod_line_iter_next(
    ffi.Pointer<gpiod_line_iter> iter,
  ) {
    return _gpiod_line_iter_next(
      iter,
    );
  }

  late final _gpiod_line_iter_next_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_line_iter_next>>(
          'gpiod_line_iter_next');
  late final _dart_gpiod_line_iter_next _gpiod_line_iter_next =
      _gpiod_line_iter_next_ptr.asFunction<_dart_gpiod_line_iter_next>();

  ffi.Pointer<ffi.Int8> gpiod_version_string() {
    return _gpiod_version_string();
  }

  late final _gpiod_version_string_ptr =
      _lookup<ffi.NativeFunction<_c_gpiod_version_string>>(
          'gpiod_version_string');
  late final _dart_gpiod_version_string _gpiod_version_string =
      _gpiod_version_string_ptr.asFunction<_dart_gpiod_version_string>();
}

abstract class idtype_t {
  static const int P_ALL = 0;
  static const int P_PID = 1;
  static const int P_PGID = 2;
}

class div_t extends ffi.Struct {
  @ffi.Int32()
  external int quot;

  @ffi.Int32()
  external int rem;
}

class ldiv_t extends ffi.Struct {
  @ffi.Int64()
  external int quot;

  @ffi.Int64()
  external int rem;
}

class lldiv_t extends ffi.Struct {
  @ffi.Int64()
  external int quot;

  @ffi.Int64()
  external int rem;
}

class __fsid_t extends ffi.Opaque {}

class __sigset_t extends ffi.Opaque {}

class timeval extends ffi.Struct {
  @ffi.Int64()
  external int tv_sec;

  @ffi.Int64()
  external int tv_usec;
}

class timespec extends ffi.Struct {
  @ffi.Int64()
  external int tv_sec;

  @ffi.Int64()
  external int tv_nsec;
}

class fd_set extends ffi.Opaque {}

class __pthread_rwlock_arch_t extends ffi.Opaque {}

class __pthread_list_t extends ffi.Struct {
  external ffi.Pointer<__pthread_list_t> __prev;

  external ffi.Pointer<__pthread_list_t> __next;
}

class __pthread_mutex_s extends ffi.Struct {
  @ffi.Int32()
  external int __lock;

  @ffi.Uint32()
  external int __count;

  @ffi.Int32()
  external int __owner;

  @ffi.Uint32()
  external int __nusers;

  @ffi.Int32()
  external int __kind;

  @ffi.Int16()
  external int __spins;

  @ffi.Int16()
  external int __elision;

  external __pthread_list_t __list;
}

class __pthread_cond_s extends ffi.Opaque {}

class random_data extends ffi.Struct {
  external ffi.Pointer<ffi.Int32> fptr;

  external ffi.Pointer<ffi.Int32> rptr;

  external ffi.Pointer<ffi.Int32> state;

  @ffi.Int32()
  external int rand_type;

  @ffi.Int32()
  external int rand_deg;

  @ffi.Int32()
  external int rand_sep;

  external ffi.Pointer<ffi.Int32> end_ptr;
}

class drand48_data extends ffi.Opaque {}

class tm extends ffi.Struct {
  @ffi.Int32()
  external int tm_sec;

  @ffi.Int32()
  external int tm_min;

  @ffi.Int32()
  external int tm_hour;

  @ffi.Int32()
  external int tm_mday;

  @ffi.Int32()
  external int tm_mon;

  @ffi.Int32()
  external int tm_year;

  @ffi.Int32()
  external int tm_wday;

  @ffi.Int32()
  external int tm_yday;

  @ffi.Int32()
  external int tm_isdst;

  @ffi.Int64()
  external int tm_gmtoff;

  external ffi.Pointer<ffi.Int8> tm_zone;
}

class itimerspec extends ffi.Struct {
  external timespec it_interval;

  external timespec it_value;
}

class sigevent extends ffi.Opaque {}

class __locale_data extends ffi.Opaque {}

class __locale_struct extends ffi.Opaque {}

class gpiod_chip extends ffi.Opaque {}

class gpiod_line extends ffi.Opaque {}

class gpiod_chip_iter extends ffi.Opaque {}

class gpiod_line_iter extends ffi.Opaque {}

class gpiod_line_bulk extends ffi.Opaque {}

class gpiod_ctxless_event_poll_fd extends ffi.Struct {
  @ffi.Int32()
  external int fd;

  @ffi.Int32()
  external int event;
}

class gpiod_line_request_config extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> consumer;

  @ffi.Int32()
  external int request_type;

  @ffi.Int32()
  external int flags;
}

class gpiod_line_event extends ffi.Struct {
  external timespec ts;

  @ffi.Int32()
  external int event_type;
}

const int GPIOD_CTXLESS_FLAG_OPEN_DRAIN = 1;

const int GPIOD_CTXLESS_FLAG_OPEN_SOURCE = 2;

const int GPIOD_CTXLESS_FLAG_BIAS_DISABLE = 4;

const int GPIOD_CTXLESS_FLAG_BIAS_PULL_DOWN = 8;

const int GPIOD_CTXLESS_FLAG_BIAS_PULL_UP = 16;

const int GPIOD_CTXLESS_EVENT_RISING_EDGE = 1;

const int GPIOD_CTXLESS_EVENT_FALLING_EDGE = 2;

const int GPIOD_CTXLESS_EVENT_BOTH_EDGES = 3;

const int GPIOD_CTXLESS_EVENT_CB_TIMEOUT = 1;

const int GPIOD_CTXLESS_EVENT_CB_RISING_EDGE = 2;

const int GPIOD_CTXLESS_EVENT_CB_FALLING_EDGE = 3;

const int GPIOD_CTXLESS_EVENT_CB_RET_ERR = -1;

const int GPIOD_CTXLESS_EVENT_CB_RET_OK = 0;

const int GPIOD_CTXLESS_EVENT_CB_RET_STOP = 1;

const int GPIOD_CTXLESS_EVENT_POLL_RET_STOP = -2;

const int GPIOD_CTXLESS_EVENT_POLL_RET_ERR = -1;

const int GPIOD_CTXLESS_EVENT_POLL_RET_TIMEOUT = 0;

const int GPIOD_LINE_DIRECTION_INPUT = 1;

const int GPIOD_LINE_DIRECTION_OUTPUT = 2;

const int GPIOD_LINE_ACTIVE_STATE_HIGH = 1;

const int GPIOD_LINE_ACTIVE_STATE_LOW = 2;

const int GPIOD_LINE_BIAS_AS_IS = 1;

const int GPIOD_LINE_BIAS_DISABLE = 2;

const int GPIOD_LINE_BIAS_PULL_UP = 3;

const int GPIOD_LINE_BIAS_PULL_DOWN = 4;

const int GPIOD_LINE_REQUEST_DIRECTION_AS_IS = 1;

const int GPIOD_LINE_REQUEST_DIRECTION_INPUT = 2;

const int GPIOD_LINE_REQUEST_DIRECTION_OUTPUT = 3;

const int GPIOD_LINE_REQUEST_EVENT_FALLING_EDGE = 4;

const int GPIOD_LINE_REQUEST_EVENT_RISING_EDGE = 5;

const int GPIOD_LINE_REQUEST_EVENT_BOTH_EDGES = 6;

const int GPIOD_LINE_REQUEST_FLAG_OPEN_DRAIN = 1;

const int GPIOD_LINE_REQUEST_FLAG_OPEN_SOURCE = 2;

const int GPIOD_LINE_REQUEST_FLAG_ACTIVE_LOW = 4;

const int GPIOD_LINE_REQUEST_FLAG_BIAS_DISABLE = 8;

const int GPIOD_LINE_REQUEST_FLAG_BIAS_PULL_DOWN = 16;

const int GPIOD_LINE_REQUEST_FLAG_BIAS_PULL_UP = 32;

const int GPIOD_LINE_EVENT_RISING_EDGE = 1;

const int GPIOD_LINE_EVENT_FALLING_EDGE = 2;

const int GPIOD_LINE_BULK_MAX_LINES = 64;

typedef _c_gpiod_ctxless_get_value = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> device,
  ffi.Uint32 offset,
  ffi.Int32 active_low,
  ffi.Pointer<ffi.Int8> consumer,
);

typedef _dart_gpiod_ctxless_get_value = int Function(
  ffi.Pointer<ffi.Int8> device,
  int offset,
  int active_low,
  ffi.Pointer<ffi.Int8> consumer,
);

typedef _c_gpiod_ctxless_get_value_ext = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> device,
  ffi.Uint32 offset,
  ffi.Int32 active_low,
  ffi.Pointer<ffi.Int8> consumer,
  ffi.Int32 flags,
);

typedef _dart_gpiod_ctxless_get_value_ext = int Function(
  ffi.Pointer<ffi.Int8> device,
  int offset,
  int active_low,
  ffi.Pointer<ffi.Int8> consumer,
  int flags,
);

typedef _c_gpiod_ctxless_get_value_multiple = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> device,
  ffi.Pointer<ffi.Uint32> offsets,
  ffi.Pointer<ffi.Int32> values,
  ffi.Uint32 num_lines,
  ffi.Int32 active_low,
  ffi.Pointer<ffi.Int8> consumer,
);

typedef _dart_gpiod_ctxless_get_value_multiple = int Function(
  ffi.Pointer<ffi.Int8> device,
  ffi.Pointer<ffi.Uint32> offsets,
  ffi.Pointer<ffi.Int32> values,
  int num_lines,
  int active_low,
  ffi.Pointer<ffi.Int8> consumer,
);

typedef _c_gpiod_ctxless_get_value_multiple_ext = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> device,
  ffi.Pointer<ffi.Uint32> offsets,
  ffi.Pointer<ffi.Int32> values,
  ffi.Uint32 num_lines,
  ffi.Int32 active_low,
  ffi.Pointer<ffi.Int8> consumer,
  ffi.Int32 flags,
);

typedef _dart_gpiod_ctxless_get_value_multiple_ext = int Function(
  ffi.Pointer<ffi.Int8> device,
  ffi.Pointer<ffi.Uint32> offsets,
  ffi.Pointer<ffi.Int32> values,
  int num_lines,
  int active_low,
  ffi.Pointer<ffi.Int8> consumer,
  int flags,
);

typedef gpiod_ctxless_set_value_cb = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef _c_gpiod_ctxless_set_value = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> device,
  ffi.Uint32 offset,
  ffi.Int32 value,
  ffi.Int32 active_low,
  ffi.Pointer<ffi.Int8> consumer,
  ffi.Pointer<ffi.NativeFunction<gpiod_ctxless_set_value_cb>> cb,
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_gpiod_ctxless_set_value = int Function(
  ffi.Pointer<ffi.Int8> device,
  int offset,
  int value,
  int active_low,
  ffi.Pointer<ffi.Int8> consumer,
  ffi.Pointer<ffi.NativeFunction<gpiod_ctxless_set_value_cb>> cb,
  ffi.Pointer<ffi.Void> data,
);

typedef _c_gpiod_ctxless_set_value_ext = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> device,
  ffi.Uint32 offset,
  ffi.Int32 value,
  ffi.Int32 active_low,
  ffi.Pointer<ffi.Int8> consumer,
  ffi.Pointer<ffi.NativeFunction<gpiod_ctxless_set_value_cb>> cb,
  ffi.Pointer<ffi.Void> data,
  ffi.Int32 flags,
);

typedef _dart_gpiod_ctxless_set_value_ext = int Function(
  ffi.Pointer<ffi.Int8> device,
  int offset,
  int value,
  int active_low,
  ffi.Pointer<ffi.Int8> consumer,
  ffi.Pointer<ffi.NativeFunction<gpiod_ctxless_set_value_cb>> cb,
  ffi.Pointer<ffi.Void> data,
  int flags,
);

typedef _c_gpiod_ctxless_set_value_multiple = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> device,
  ffi.Pointer<ffi.Uint32> offsets,
  ffi.Pointer<ffi.Int32> values,
  ffi.Uint32 num_lines,
  ffi.Int32 active_low,
  ffi.Pointer<ffi.Int8> consumer,
  ffi.Pointer<ffi.NativeFunction<gpiod_ctxless_set_value_cb>> cb,
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_gpiod_ctxless_set_value_multiple = int Function(
  ffi.Pointer<ffi.Int8> device,
  ffi.Pointer<ffi.Uint32> offsets,
  ffi.Pointer<ffi.Int32> values,
  int num_lines,
  int active_low,
  ffi.Pointer<ffi.Int8> consumer,
  ffi.Pointer<ffi.NativeFunction<gpiod_ctxless_set_value_cb>> cb,
  ffi.Pointer<ffi.Void> data,
);

typedef _c_gpiod_ctxless_set_value_multiple_ext = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> device,
  ffi.Pointer<ffi.Uint32> offsets,
  ffi.Pointer<ffi.Int32> values,
  ffi.Uint32 num_lines,
  ffi.Int32 active_low,
  ffi.Pointer<ffi.Int8> consumer,
  ffi.Pointer<ffi.NativeFunction<gpiod_ctxless_set_value_cb>> cb,
  ffi.Pointer<ffi.Void> data,
  ffi.Int32 flags,
);

typedef _dart_gpiod_ctxless_set_value_multiple_ext = int Function(
  ffi.Pointer<ffi.Int8> device,
  ffi.Pointer<ffi.Uint32> offsets,
  ffi.Pointer<ffi.Int32> values,
  int num_lines,
  int active_low,
  ffi.Pointer<ffi.Int8> consumer,
  ffi.Pointer<ffi.NativeFunction<gpiod_ctxless_set_value_cb>> cb,
  ffi.Pointer<ffi.Void> data,
  int flags,
);

typedef gpiod_ctxless_event_poll_cb = ffi.Int32 Function(
  ffi.Uint32,
  ffi.Pointer<gpiod_ctxless_event_poll_fd>,
  ffi.Pointer<timespec>,
  ffi.Pointer<ffi.Void>,
);

typedef gpiod_ctxless_event_handle_cb = ffi.Int32 Function(
  ffi.Int32,
  ffi.Uint32,
  ffi.Pointer<timespec>,
  ffi.Pointer<ffi.Void>,
);

typedef _c_gpiod_ctxless_event_loop = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> device,
  ffi.Uint32 offset,
  ffi.Int32 active_low,
  ffi.Pointer<ffi.Int8> consumer,
  ffi.Pointer<timespec> timeout,
  ffi.Pointer<ffi.NativeFunction<gpiod_ctxless_event_poll_cb>> poll_cb,
  ffi.Pointer<ffi.NativeFunction<gpiod_ctxless_event_handle_cb>> event_cb,
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_gpiod_ctxless_event_loop = int Function(
  ffi.Pointer<ffi.Int8> device,
  int offset,
  int active_low,
  ffi.Pointer<ffi.Int8> consumer,
  ffi.Pointer<timespec> timeout,
  ffi.Pointer<ffi.NativeFunction<gpiod_ctxless_event_poll_cb>> poll_cb,
  ffi.Pointer<ffi.NativeFunction<gpiod_ctxless_event_handle_cb>> event_cb,
  ffi.Pointer<ffi.Void> data,
);

typedef _c_gpiod_ctxless_event_loop_multiple = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> device,
  ffi.Pointer<ffi.Uint32> offsets,
  ffi.Uint32 num_lines,
  ffi.Int32 active_low,
  ffi.Pointer<ffi.Int8> consumer,
  ffi.Pointer<timespec> timeout,
  ffi.Pointer<ffi.NativeFunction<gpiod_ctxless_event_poll_cb>> poll_cb,
  ffi.Pointer<ffi.NativeFunction<gpiod_ctxless_event_handle_cb>> event_cb,
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_gpiod_ctxless_event_loop_multiple = int Function(
  ffi.Pointer<ffi.Int8> device,
  ffi.Pointer<ffi.Uint32> offsets,
  int num_lines,
  int active_low,
  ffi.Pointer<ffi.Int8> consumer,
  ffi.Pointer<timespec> timeout,
  ffi.Pointer<ffi.NativeFunction<gpiod_ctxless_event_poll_cb>> poll_cb,
  ffi.Pointer<ffi.NativeFunction<gpiod_ctxless_event_handle_cb>> event_cb,
  ffi.Pointer<ffi.Void> data,
);

typedef _c_gpiod_ctxless_event_monitor = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> device,
  ffi.Int32 event_type,
  ffi.Uint32 offset,
  ffi.Int32 active_low,
  ffi.Pointer<ffi.Int8> consumer,
  ffi.Pointer<timespec> timeout,
  ffi.Pointer<ffi.NativeFunction<gpiod_ctxless_event_poll_cb>> poll_cb,
  ffi.Pointer<ffi.NativeFunction<gpiod_ctxless_event_handle_cb>> event_cb,
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_gpiod_ctxless_event_monitor = int Function(
  ffi.Pointer<ffi.Int8> device,
  int event_type,
  int offset,
  int active_low,
  ffi.Pointer<ffi.Int8> consumer,
  ffi.Pointer<timespec> timeout,
  ffi.Pointer<ffi.NativeFunction<gpiod_ctxless_event_poll_cb>> poll_cb,
  ffi.Pointer<ffi.NativeFunction<gpiod_ctxless_event_handle_cb>> event_cb,
  ffi.Pointer<ffi.Void> data,
);

typedef _c_gpiod_ctxless_event_monitor_ext = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> device,
  ffi.Int32 event_type,
  ffi.Uint32 offset,
  ffi.Int32 active_low,
  ffi.Pointer<ffi.Int8> consumer,
  ffi.Pointer<timespec> timeout,
  ffi.Pointer<ffi.NativeFunction<gpiod_ctxless_event_poll_cb>> poll_cb,
  ffi.Pointer<ffi.NativeFunction<gpiod_ctxless_event_handle_cb>> event_cb,
  ffi.Pointer<ffi.Void> data,
  ffi.Int32 flags,
);

typedef _dart_gpiod_ctxless_event_monitor_ext = int Function(
  ffi.Pointer<ffi.Int8> device,
  int event_type,
  int offset,
  int active_low,
  ffi.Pointer<ffi.Int8> consumer,
  ffi.Pointer<timespec> timeout,
  ffi.Pointer<ffi.NativeFunction<gpiod_ctxless_event_poll_cb>> poll_cb,
  ffi.Pointer<ffi.NativeFunction<gpiod_ctxless_event_handle_cb>> event_cb,
  ffi.Pointer<ffi.Void> data,
  int flags,
);

typedef _c_gpiod_ctxless_event_monitor_multiple = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> device,
  ffi.Int32 event_type,
  ffi.Pointer<ffi.Uint32> offsets,
  ffi.Uint32 num_lines,
  ffi.Int32 active_low,
  ffi.Pointer<ffi.Int8> consumer,
  ffi.Pointer<timespec> timeout,
  ffi.Pointer<ffi.NativeFunction<gpiod_ctxless_event_poll_cb>> poll_cb,
  ffi.Pointer<ffi.NativeFunction<gpiod_ctxless_event_handle_cb>> event_cb,
  ffi.Pointer<ffi.Void> data,
);

typedef _dart_gpiod_ctxless_event_monitor_multiple = int Function(
  ffi.Pointer<ffi.Int8> device,
  int event_type,
  ffi.Pointer<ffi.Uint32> offsets,
  int num_lines,
  int active_low,
  ffi.Pointer<ffi.Int8> consumer,
  ffi.Pointer<timespec> timeout,
  ffi.Pointer<ffi.NativeFunction<gpiod_ctxless_event_poll_cb>> poll_cb,
  ffi.Pointer<ffi.NativeFunction<gpiod_ctxless_event_handle_cb>> event_cb,
  ffi.Pointer<ffi.Void> data,
);

typedef _c_gpiod_ctxless_event_monitor_multiple_ext = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> device,
  ffi.Int32 event_type,
  ffi.Pointer<ffi.Uint32> offsets,
  ffi.Uint32 num_lines,
  ffi.Int32 active_low,
  ffi.Pointer<ffi.Int8> consumer,
  ffi.Pointer<timespec> timeout,
  ffi.Pointer<ffi.NativeFunction<gpiod_ctxless_event_poll_cb>> poll_cb,
  ffi.Pointer<ffi.NativeFunction<gpiod_ctxless_event_handle_cb>> event_cb,
  ffi.Pointer<ffi.Void> data,
  ffi.Int32 flags,
);

typedef _dart_gpiod_ctxless_event_monitor_multiple_ext = int Function(
  ffi.Pointer<ffi.Int8> device,
  int event_type,
  ffi.Pointer<ffi.Uint32> offsets,
  int num_lines,
  int active_low,
  ffi.Pointer<ffi.Int8> consumer,
  ffi.Pointer<timespec> timeout,
  ffi.Pointer<ffi.NativeFunction<gpiod_ctxless_event_poll_cb>> poll_cb,
  ffi.Pointer<ffi.NativeFunction<gpiod_ctxless_event_handle_cb>> event_cb,
  ffi.Pointer<ffi.Void> data,
  int flags,
);

typedef _c_gpiod_ctxless_find_line = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> chipname,
  ffi.Int32 chipname_size,
  ffi.Pointer<ffi.Uint32> offset,
);

typedef _dart_gpiod_ctxless_find_line = int Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> chipname,
  int chipname_size,
  ffi.Pointer<ffi.Uint32> offset,
);

typedef _c_gpiod_chip_open = ffi.Pointer<gpiod_chip> Function(
  ffi.Pointer<ffi.Int8> path,
);

typedef _dart_gpiod_chip_open = ffi.Pointer<gpiod_chip> Function(
  ffi.Pointer<ffi.Int8> path,
);

typedef _c_gpiod_chip_open_by_name = ffi.Pointer<gpiod_chip> Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_gpiod_chip_open_by_name = ffi.Pointer<gpiod_chip> Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_gpiod_chip_open_by_number = ffi.Pointer<gpiod_chip> Function(
  ffi.Uint32 num,
);

typedef _dart_gpiod_chip_open_by_number = ffi.Pointer<gpiod_chip> Function(
  int num,
);

typedef _c_gpiod_chip_open_by_label = ffi.Pointer<gpiod_chip> Function(
  ffi.Pointer<ffi.Int8> label,
);

typedef _dart_gpiod_chip_open_by_label = ffi.Pointer<gpiod_chip> Function(
  ffi.Pointer<ffi.Int8> label,
);

typedef _c_gpiod_chip_open_lookup = ffi.Pointer<gpiod_chip> Function(
  ffi.Pointer<ffi.Int8> descr,
);

typedef _dart_gpiod_chip_open_lookup = ffi.Pointer<gpiod_chip> Function(
  ffi.Pointer<ffi.Int8> descr,
);

typedef _c_gpiod_chip_close = ffi.Void Function(
  ffi.Pointer<gpiod_chip> chip,
);

typedef _dart_gpiod_chip_close = void Function(
  ffi.Pointer<gpiod_chip> chip,
);

typedef _c_gpiod_chip_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<gpiod_chip> chip,
);

typedef _dart_gpiod_chip_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<gpiod_chip> chip,
);

typedef _c_gpiod_chip_label = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<gpiod_chip> chip,
);

typedef _dart_gpiod_chip_label = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<gpiod_chip> chip,
);

typedef _c_gpiod_chip_num_lines = ffi.Uint32 Function(
  ffi.Pointer<gpiod_chip> chip,
);

typedef _dart_gpiod_chip_num_lines = int Function(
  ffi.Pointer<gpiod_chip> chip,
);

typedef _c_gpiod_chip_get_line = ffi.Pointer<gpiod_line> Function(
  ffi.Pointer<gpiod_chip> chip,
  ffi.Uint32 offset,
);

typedef _dart_gpiod_chip_get_line = ffi.Pointer<gpiod_line> Function(
  ffi.Pointer<gpiod_chip> chip,
  int offset,
);

typedef _c_gpiod_chip_get_lines = ffi.Int32 Function(
  ffi.Pointer<gpiod_chip> chip,
  ffi.Pointer<ffi.Uint32> offsets,
  ffi.Uint32 num_offsets,
  ffi.Pointer<gpiod_line_bulk> bulk,
);

typedef _dart_gpiod_chip_get_lines = int Function(
  ffi.Pointer<gpiod_chip> chip,
  ffi.Pointer<ffi.Uint32> offsets,
  int num_offsets,
  ffi.Pointer<gpiod_line_bulk> bulk,
);

typedef _c_gpiod_chip_get_all_lines = ffi.Int32 Function(
  ffi.Pointer<gpiod_chip> chip,
  ffi.Pointer<gpiod_line_bulk> bulk,
);

typedef _dart_gpiod_chip_get_all_lines = int Function(
  ffi.Pointer<gpiod_chip> chip,
  ffi.Pointer<gpiod_line_bulk> bulk,
);

typedef _c_gpiod_chip_find_line = ffi.Pointer<gpiod_line> Function(
  ffi.Pointer<gpiod_chip> chip,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_gpiod_chip_find_line = ffi.Pointer<gpiod_line> Function(
  ffi.Pointer<gpiod_chip> chip,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_gpiod_chip_find_lines = ffi.Int32 Function(
  ffi.Pointer<gpiod_chip> chip,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> names,
  ffi.Pointer<gpiod_line_bulk> bulk,
);

typedef _dart_gpiod_chip_find_lines = int Function(
  ffi.Pointer<gpiod_chip> chip,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> names,
  ffi.Pointer<gpiod_line_bulk> bulk,
);

typedef _c_gpiod_line_offset = ffi.Uint32 Function(
  ffi.Pointer<gpiod_line> line,
);

typedef _dart_gpiod_line_offset = int Function(
  ffi.Pointer<gpiod_line> line,
);

typedef _c_gpiod_line_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<gpiod_line> line,
);

typedef _dart_gpiod_line_name = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<gpiod_line> line,
);

typedef _c_gpiod_line_consumer = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<gpiod_line> line,
);

typedef _dart_gpiod_line_consumer = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<gpiod_line> line,
);

typedef _c_gpiod_line_direction = ffi.Int32 Function(
  ffi.Pointer<gpiod_line> line,
);

typedef _dart_gpiod_line_direction = int Function(
  ffi.Pointer<gpiod_line> line,
);

typedef _c_gpiod_line_active_state = ffi.Int32 Function(
  ffi.Pointer<gpiod_line> line,
);

typedef _dart_gpiod_line_active_state = int Function(
  ffi.Pointer<gpiod_line> line,
);

typedef _c_gpiod_line_bias = ffi.Int32 Function(
  ffi.Pointer<gpiod_line> line,
);

typedef _dart_gpiod_line_bias = int Function(
  ffi.Pointer<gpiod_line> line,
);

typedef _c_gpiod_line_is_used = ffi.Int32 Function(
  ffi.Pointer<gpiod_line> line,
);

typedef _dart_gpiod_line_is_used = int Function(
  ffi.Pointer<gpiod_line> line,
);

typedef _c_gpiod_line_is_open_drain = ffi.Int32 Function(
  ffi.Pointer<gpiod_line> line,
);

typedef _dart_gpiod_line_is_open_drain = int Function(
  ffi.Pointer<gpiod_line> line,
);

typedef _c_gpiod_line_is_open_source = ffi.Int32 Function(
  ffi.Pointer<gpiod_line> line,
);

typedef _dart_gpiod_line_is_open_source = int Function(
  ffi.Pointer<gpiod_line> line,
);

typedef _c_gpiod_line_update = ffi.Int32 Function(
  ffi.Pointer<gpiod_line> line,
);

typedef _dart_gpiod_line_update = int Function(
  ffi.Pointer<gpiod_line> line,
);

typedef _c_gpiod_line_needs_update = ffi.Int32 Function(
  ffi.Pointer<gpiod_line> line,
);

typedef _dart_gpiod_line_needs_update = int Function(
  ffi.Pointer<gpiod_line> line,
);

typedef _c_gpiod_line_request = ffi.Int32 Function(
  ffi.Pointer<gpiod_line> line,
  ffi.Pointer<gpiod_line_request_config> config,
  ffi.Int32 default_val,
);

typedef _dart_gpiod_line_request = int Function(
  ffi.Pointer<gpiod_line> line,
  ffi.Pointer<gpiod_line_request_config> config,
  int default_val,
);

typedef _c_gpiod_line_request_input = ffi.Int32 Function(
  ffi.Pointer<gpiod_line> line,
  ffi.Pointer<ffi.Int8> consumer,
);

typedef _dart_gpiod_line_request_input = int Function(
  ffi.Pointer<gpiod_line> line,
  ffi.Pointer<ffi.Int8> consumer,
);

typedef _c_gpiod_line_request_output = ffi.Int32 Function(
  ffi.Pointer<gpiod_line> line,
  ffi.Pointer<ffi.Int8> consumer,
  ffi.Int32 default_val,
);

typedef _dart_gpiod_line_request_output = int Function(
  ffi.Pointer<gpiod_line> line,
  ffi.Pointer<ffi.Int8> consumer,
  int default_val,
);

typedef _c_gpiod_line_request_rising_edge_events = ffi.Int32 Function(
  ffi.Pointer<gpiod_line> line,
  ffi.Pointer<ffi.Int8> consumer,
);

typedef _dart_gpiod_line_request_rising_edge_events = int Function(
  ffi.Pointer<gpiod_line> line,
  ffi.Pointer<ffi.Int8> consumer,
);

typedef _c_gpiod_line_request_falling_edge_events = ffi.Int32 Function(
  ffi.Pointer<gpiod_line> line,
  ffi.Pointer<ffi.Int8> consumer,
);

typedef _dart_gpiod_line_request_falling_edge_events = int Function(
  ffi.Pointer<gpiod_line> line,
  ffi.Pointer<ffi.Int8> consumer,
);

typedef _c_gpiod_line_request_both_edges_events = ffi.Int32 Function(
  ffi.Pointer<gpiod_line> line,
  ffi.Pointer<ffi.Int8> consumer,
);

typedef _dart_gpiod_line_request_both_edges_events = int Function(
  ffi.Pointer<gpiod_line> line,
  ffi.Pointer<ffi.Int8> consumer,
);

typedef _c_gpiod_line_request_input_flags = ffi.Int32 Function(
  ffi.Pointer<gpiod_line> line,
  ffi.Pointer<ffi.Int8> consumer,
  ffi.Int32 flags,
);

typedef _dart_gpiod_line_request_input_flags = int Function(
  ffi.Pointer<gpiod_line> line,
  ffi.Pointer<ffi.Int8> consumer,
  int flags,
);

typedef _c_gpiod_line_request_output_flags = ffi.Int32 Function(
  ffi.Pointer<gpiod_line> line,
  ffi.Pointer<ffi.Int8> consumer,
  ffi.Int32 flags,
  ffi.Int32 default_val,
);

typedef _dart_gpiod_line_request_output_flags = int Function(
  ffi.Pointer<gpiod_line> line,
  ffi.Pointer<ffi.Int8> consumer,
  int flags,
  int default_val,
);

typedef _c_gpiod_line_request_rising_edge_events_flags = ffi.Int32 Function(
  ffi.Pointer<gpiod_line> line,
  ffi.Pointer<ffi.Int8> consumer,
  ffi.Int32 flags,
);

typedef _dart_gpiod_line_request_rising_edge_events_flags = int Function(
  ffi.Pointer<gpiod_line> line,
  ffi.Pointer<ffi.Int8> consumer,
  int flags,
);

typedef _c_gpiod_line_request_falling_edge_events_flags = ffi.Int32 Function(
  ffi.Pointer<gpiod_line> line,
  ffi.Pointer<ffi.Int8> consumer,
  ffi.Int32 flags,
);

typedef _dart_gpiod_line_request_falling_edge_events_flags = int Function(
  ffi.Pointer<gpiod_line> line,
  ffi.Pointer<ffi.Int8> consumer,
  int flags,
);

typedef _c_gpiod_line_request_both_edges_events_flags = ffi.Int32 Function(
  ffi.Pointer<gpiod_line> line,
  ffi.Pointer<ffi.Int8> consumer,
  ffi.Int32 flags,
);

typedef _dart_gpiod_line_request_both_edges_events_flags = int Function(
  ffi.Pointer<gpiod_line> line,
  ffi.Pointer<ffi.Int8> consumer,
  int flags,
);

typedef _c_gpiod_line_request_bulk = ffi.Int32 Function(
  ffi.Pointer<gpiod_line_bulk> bulk,
  ffi.Pointer<gpiod_line_request_config> config,
  ffi.Pointer<ffi.Int32> default_vals,
);

typedef _dart_gpiod_line_request_bulk = int Function(
  ffi.Pointer<gpiod_line_bulk> bulk,
  ffi.Pointer<gpiod_line_request_config> config,
  ffi.Pointer<ffi.Int32> default_vals,
);

typedef _c_gpiod_line_request_bulk_input = ffi.Int32 Function(
  ffi.Pointer<gpiod_line_bulk> bulk,
  ffi.Pointer<ffi.Int8> consumer,
);

typedef _dart_gpiod_line_request_bulk_input = int Function(
  ffi.Pointer<gpiod_line_bulk> bulk,
  ffi.Pointer<ffi.Int8> consumer,
);

typedef _c_gpiod_line_request_bulk_output = ffi.Int32 Function(
  ffi.Pointer<gpiod_line_bulk> bulk,
  ffi.Pointer<ffi.Int8> consumer,
  ffi.Pointer<ffi.Int32> default_vals,
);

typedef _dart_gpiod_line_request_bulk_output = int Function(
  ffi.Pointer<gpiod_line_bulk> bulk,
  ffi.Pointer<ffi.Int8> consumer,
  ffi.Pointer<ffi.Int32> default_vals,
);

typedef _c_gpiod_line_request_bulk_rising_edge_events = ffi.Int32 Function(
  ffi.Pointer<gpiod_line_bulk> bulk,
  ffi.Pointer<ffi.Int8> consumer,
);

typedef _dart_gpiod_line_request_bulk_rising_edge_events = int Function(
  ffi.Pointer<gpiod_line_bulk> bulk,
  ffi.Pointer<ffi.Int8> consumer,
);

typedef _c_gpiod_line_request_bulk_falling_edge_events = ffi.Int32 Function(
  ffi.Pointer<gpiod_line_bulk> bulk,
  ffi.Pointer<ffi.Int8> consumer,
);

typedef _dart_gpiod_line_request_bulk_falling_edge_events = int Function(
  ffi.Pointer<gpiod_line_bulk> bulk,
  ffi.Pointer<ffi.Int8> consumer,
);

typedef _c_gpiod_line_request_bulk_both_edges_events = ffi.Int32 Function(
  ffi.Pointer<gpiod_line_bulk> bulk,
  ffi.Pointer<ffi.Int8> consumer,
);

typedef _dart_gpiod_line_request_bulk_both_edges_events = int Function(
  ffi.Pointer<gpiod_line_bulk> bulk,
  ffi.Pointer<ffi.Int8> consumer,
);

typedef _c_gpiod_line_request_bulk_input_flags = ffi.Int32 Function(
  ffi.Pointer<gpiod_line_bulk> bulk,
  ffi.Pointer<ffi.Int8> consumer,
  ffi.Int32 flags,
);

typedef _dart_gpiod_line_request_bulk_input_flags = int Function(
  ffi.Pointer<gpiod_line_bulk> bulk,
  ffi.Pointer<ffi.Int8> consumer,
  int flags,
);

typedef _c_gpiod_line_request_bulk_output_flags = ffi.Int32 Function(
  ffi.Pointer<gpiod_line_bulk> bulk,
  ffi.Pointer<ffi.Int8> consumer,
  ffi.Int32 flags,
  ffi.Pointer<ffi.Int32> default_vals,
);

typedef _dart_gpiod_line_request_bulk_output_flags = int Function(
  ffi.Pointer<gpiod_line_bulk> bulk,
  ffi.Pointer<ffi.Int8> consumer,
  int flags,
  ffi.Pointer<ffi.Int32> default_vals,
);

typedef _c_gpiod_line_request_bulk_rising_edge_events_flags = ffi.Int32
    Function(
  ffi.Pointer<gpiod_line_bulk> bulk,
  ffi.Pointer<ffi.Int8> consumer,
  ffi.Int32 flags,
);

typedef _dart_gpiod_line_request_bulk_rising_edge_events_flags = int Function(
  ffi.Pointer<gpiod_line_bulk> bulk,
  ffi.Pointer<ffi.Int8> consumer,
  int flags,
);

typedef _c_gpiod_line_request_bulk_falling_edge_events_flags = ffi.Int32
    Function(
  ffi.Pointer<gpiod_line_bulk> bulk,
  ffi.Pointer<ffi.Int8> consumer,
  ffi.Int32 flags,
);

typedef _dart_gpiod_line_request_bulk_falling_edge_events_flags = int Function(
  ffi.Pointer<gpiod_line_bulk> bulk,
  ffi.Pointer<ffi.Int8> consumer,
  int flags,
);

typedef _c_gpiod_line_request_bulk_both_edges_events_flags = ffi.Int32 Function(
  ffi.Pointer<gpiod_line_bulk> bulk,
  ffi.Pointer<ffi.Int8> consumer,
  ffi.Int32 flags,
);

typedef _dart_gpiod_line_request_bulk_both_edges_events_flags = int Function(
  ffi.Pointer<gpiod_line_bulk> bulk,
  ffi.Pointer<ffi.Int8> consumer,
  int flags,
);

typedef _c_gpiod_line_release = ffi.Void Function(
  ffi.Pointer<gpiod_line> line,
);

typedef _dart_gpiod_line_release = void Function(
  ffi.Pointer<gpiod_line> line,
);

typedef _c_gpiod_line_release_bulk = ffi.Void Function(
  ffi.Pointer<gpiod_line_bulk> bulk,
);

typedef _dart_gpiod_line_release_bulk = void Function(
  ffi.Pointer<gpiod_line_bulk> bulk,
);

typedef _c_gpiod_line_is_requested = ffi.Int32 Function(
  ffi.Pointer<gpiod_line> line,
);

typedef _dart_gpiod_line_is_requested = int Function(
  ffi.Pointer<gpiod_line> line,
);

typedef _c_gpiod_line_is_free = ffi.Int32 Function(
  ffi.Pointer<gpiod_line> line,
);

typedef _dart_gpiod_line_is_free = int Function(
  ffi.Pointer<gpiod_line> line,
);

typedef _c_gpiod_line_get_value = ffi.Int32 Function(
  ffi.Pointer<gpiod_line> line,
);

typedef _dart_gpiod_line_get_value = int Function(
  ffi.Pointer<gpiod_line> line,
);

typedef _c_gpiod_line_get_value_bulk = ffi.Int32 Function(
  ffi.Pointer<gpiod_line_bulk> bulk,
  ffi.Pointer<ffi.Int32> values,
);

typedef _dart_gpiod_line_get_value_bulk = int Function(
  ffi.Pointer<gpiod_line_bulk> bulk,
  ffi.Pointer<ffi.Int32> values,
);

typedef _c_gpiod_line_set_value = ffi.Int32 Function(
  ffi.Pointer<gpiod_line> line,
  ffi.Int32 value,
);

typedef _dart_gpiod_line_set_value = int Function(
  ffi.Pointer<gpiod_line> line,
  int value,
);

typedef _c_gpiod_line_set_value_bulk = ffi.Int32 Function(
  ffi.Pointer<gpiod_line_bulk> bulk,
  ffi.Pointer<ffi.Int32> values,
);

typedef _dart_gpiod_line_set_value_bulk = int Function(
  ffi.Pointer<gpiod_line_bulk> bulk,
  ffi.Pointer<ffi.Int32> values,
);

typedef _c_gpiod_line_set_config = ffi.Int32 Function(
  ffi.Pointer<gpiod_line> line,
  ffi.Int32 direction,
  ffi.Int32 flags,
  ffi.Int32 value,
);

typedef _dart_gpiod_line_set_config = int Function(
  ffi.Pointer<gpiod_line> line,
  int direction,
  int flags,
  int value,
);

typedef _c_gpiod_line_set_config_bulk = ffi.Int32 Function(
  ffi.Pointer<gpiod_line_bulk> bulk,
  ffi.Int32 direction,
  ffi.Int32 flags,
  ffi.Pointer<ffi.Int32> values,
);

typedef _dart_gpiod_line_set_config_bulk = int Function(
  ffi.Pointer<gpiod_line_bulk> bulk,
  int direction,
  int flags,
  ffi.Pointer<ffi.Int32> values,
);

typedef _c_gpiod_line_set_flags = ffi.Int32 Function(
  ffi.Pointer<gpiod_line> line,
  ffi.Int32 flags,
);

typedef _dart_gpiod_line_set_flags = int Function(
  ffi.Pointer<gpiod_line> line,
  int flags,
);

typedef _c_gpiod_line_set_flags_bulk = ffi.Int32 Function(
  ffi.Pointer<gpiod_line_bulk> bulk,
  ffi.Int32 flags,
);

typedef _dart_gpiod_line_set_flags_bulk = int Function(
  ffi.Pointer<gpiod_line_bulk> bulk,
  int flags,
);

typedef _c_gpiod_line_set_direction_input = ffi.Int32 Function(
  ffi.Pointer<gpiod_line> line,
);

typedef _dart_gpiod_line_set_direction_input = int Function(
  ffi.Pointer<gpiod_line> line,
);

typedef _c_gpiod_line_set_direction_input_bulk = ffi.Int32 Function(
  ffi.Pointer<gpiod_line_bulk> bulk,
);

typedef _dart_gpiod_line_set_direction_input_bulk = int Function(
  ffi.Pointer<gpiod_line_bulk> bulk,
);

typedef _c_gpiod_line_set_direction_output = ffi.Int32 Function(
  ffi.Pointer<gpiod_line> line,
  ffi.Int32 value,
);

typedef _dart_gpiod_line_set_direction_output = int Function(
  ffi.Pointer<gpiod_line> line,
  int value,
);

typedef _c_gpiod_line_set_direction_output_bulk = ffi.Int32 Function(
  ffi.Pointer<gpiod_line_bulk> bulk,
  ffi.Pointer<ffi.Int32> values,
);

typedef _dart_gpiod_line_set_direction_output_bulk = int Function(
  ffi.Pointer<gpiod_line_bulk> bulk,
  ffi.Pointer<ffi.Int32> values,
);

typedef _c_gpiod_line_event_wait = ffi.Int32 Function(
  ffi.Pointer<gpiod_line> line,
  ffi.Pointer<timespec> timeout,
);

typedef _dart_gpiod_line_event_wait = int Function(
  ffi.Pointer<gpiod_line> line,
  ffi.Pointer<timespec> timeout,
);

typedef _c_gpiod_line_event_wait_bulk = ffi.Int32 Function(
  ffi.Pointer<gpiod_line_bulk> bulk,
  ffi.Pointer<timespec> timeout,
  ffi.Pointer<gpiod_line_bulk> event_bulk,
);

typedef _dart_gpiod_line_event_wait_bulk = int Function(
  ffi.Pointer<gpiod_line_bulk> bulk,
  ffi.Pointer<timespec> timeout,
  ffi.Pointer<gpiod_line_bulk> event_bulk,
);

typedef _c_gpiod_line_event_read = ffi.Int32 Function(
  ffi.Pointer<gpiod_line> line,
  ffi.Pointer<gpiod_line_event> event,
);

typedef _dart_gpiod_line_event_read = int Function(
  ffi.Pointer<gpiod_line> line,
  ffi.Pointer<gpiod_line_event> event,
);

typedef _c_gpiod_line_event_read_multiple = ffi.Int32 Function(
  ffi.Pointer<gpiod_line> line,
  ffi.Pointer<gpiod_line_event> events,
  ffi.Uint32 num_events,
);

typedef _dart_gpiod_line_event_read_multiple = int Function(
  ffi.Pointer<gpiod_line> line,
  ffi.Pointer<gpiod_line_event> events,
  int num_events,
);

typedef _c_gpiod_line_event_get_fd = ffi.Int32 Function(
  ffi.Pointer<gpiod_line> line,
);

typedef _dart_gpiod_line_event_get_fd = int Function(
  ffi.Pointer<gpiod_line> line,
);

typedef _c_gpiod_line_event_read_fd = ffi.Int32 Function(
  ffi.Int32 fd,
  ffi.Pointer<gpiod_line_event> event,
);

typedef _dart_gpiod_line_event_read_fd = int Function(
  int fd,
  ffi.Pointer<gpiod_line_event> event,
);

typedef _c_gpiod_line_event_read_fd_multiple = ffi.Int32 Function(
  ffi.Int32 fd,
  ffi.Pointer<gpiod_line_event> events,
  ffi.Uint32 num_events,
);

typedef _dart_gpiod_line_event_read_fd_multiple = int Function(
  int fd,
  ffi.Pointer<gpiod_line_event> events,
  int num_events,
);

typedef _c_gpiod_line_get = ffi.Pointer<gpiod_line> Function(
  ffi.Pointer<ffi.Int8> device,
  ffi.Uint32 offset,
);

typedef _dart_gpiod_line_get = ffi.Pointer<gpiod_line> Function(
  ffi.Pointer<ffi.Int8> device,
  int offset,
);

typedef _c_gpiod_line_find = ffi.Pointer<gpiod_line> Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_gpiod_line_find = ffi.Pointer<gpiod_line> Function(
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_gpiod_line_close_chip = ffi.Void Function(
  ffi.Pointer<gpiod_line> line,
);

typedef _dart_gpiod_line_close_chip = void Function(
  ffi.Pointer<gpiod_line> line,
);

typedef _c_gpiod_line_get_chip = ffi.Pointer<gpiod_chip> Function(
  ffi.Pointer<gpiod_line> line,
);

typedef _dart_gpiod_line_get_chip = ffi.Pointer<gpiod_chip> Function(
  ffi.Pointer<gpiod_line> line,
);

typedef _c_gpiod_chip_iter_new = ffi.Pointer<gpiod_chip_iter> Function();

typedef _dart_gpiod_chip_iter_new = ffi.Pointer<gpiod_chip_iter> Function();

typedef _c_gpiod_chip_iter_free = ffi.Void Function(
  ffi.Pointer<gpiod_chip_iter> iter,
);

typedef _dart_gpiod_chip_iter_free = void Function(
  ffi.Pointer<gpiod_chip_iter> iter,
);

typedef _c_gpiod_chip_iter_free_noclose = ffi.Void Function(
  ffi.Pointer<gpiod_chip_iter> iter,
);

typedef _dart_gpiod_chip_iter_free_noclose = void Function(
  ffi.Pointer<gpiod_chip_iter> iter,
);

typedef _c_gpiod_chip_iter_next = ffi.Pointer<gpiod_chip> Function(
  ffi.Pointer<gpiod_chip_iter> iter,
);

typedef _dart_gpiod_chip_iter_next = ffi.Pointer<gpiod_chip> Function(
  ffi.Pointer<gpiod_chip_iter> iter,
);

typedef _c_gpiod_chip_iter_next_noclose = ffi.Pointer<gpiod_chip> Function(
  ffi.Pointer<gpiod_chip_iter> iter,
);

typedef _dart_gpiod_chip_iter_next_noclose = ffi.Pointer<gpiod_chip> Function(
  ffi.Pointer<gpiod_chip_iter> iter,
);

typedef _c_gpiod_line_iter_new = ffi.Pointer<gpiod_line_iter> Function(
  ffi.Pointer<gpiod_chip> chip,
);

typedef _dart_gpiod_line_iter_new = ffi.Pointer<gpiod_line_iter> Function(
  ffi.Pointer<gpiod_chip> chip,
);

typedef _c_gpiod_line_iter_free = ffi.Void Function(
  ffi.Pointer<gpiod_line_iter> iter,
);

typedef _dart_gpiod_line_iter_free = void Function(
  ffi.Pointer<gpiod_line_iter> iter,
);

typedef _c_gpiod_line_iter_next = ffi.Pointer<gpiod_line> Function(
  ffi.Pointer<gpiod_line_iter> iter,
);

typedef _dart_gpiod_line_iter_next = ffi.Pointer<gpiod_line> Function(
  ffi.Pointer<gpiod_line_iter> iter,
);

typedef _c_gpiod_version_string = ffi.Pointer<ffi.Int8> Function();

typedef _dart_gpiod_version_string = ffi.Pointer<ffi.Int8> Function();
